name: Admin Update

on:
  # Déclenchement manuel
  workflow_dispatch:
  # Cron chaque premier du mois à 9h UTC
  schedule:
    - cron: '0 9 1 * *'

# Ajouter les permissions au niveau du workflow
permissions:
  contents: write
  actions: read
  pull-requests: write
  issues: write

jobs:
  admin-update:
    name: Execute CI Admin Scripts
    runs-on: ubuntu-latest
    # Exécuter seulement sur main/master pour les scheduled runs
    if:
      github.event_name != 'schedule' || github.ref == 'refs/heads/main' ||
      github.ref == 'refs/heads/master'
    outputs:
      changes-detected: ${{ steps.check-changes.outputs.changes }}

    steps:
      - name: Checkout pnpm repo
        uses: 'chlbri/pnpmi-action@main'

      - name: Execute CI Admin
        run: pnpm run ci:admin

      - name: Check for changes
        id: check-changes
        run: |
          if git diff --quiet && git diff --cached --quiet; then
            echo "changes=false" >> $GITHUB_OUTPUT
          else
            echo "changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Upload workspace
        if: steps.check-changes.outputs.changes == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: updated-workspace
          path: |
            .
            !node_modules
            !.git
          retention-days: 1

  commit-changes:
    name: Commit Changes
    runs-on: ubuntu-latest
    needs: admin-update
    if: needs.admin-update.outputs.changes-detected == 'true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Download workspace
        uses: actions/download-artifact@v4
        with:
          name: updated-workspace
          path: .

      - name: Commit changes via GitHub API
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Get current commit SHA
            const { data: ref } = await github.rest.git.getRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'heads/main'
            });
            
            const currentCommitSha = ref.object.sha;
            
            // Get current tree
            const { data: currentCommit } = await github.rest.git.getCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: currentCommitSha
            });
            
            // Create blobs for changed files
            const { execSync } = require('child_process');
            const changedFiles = execSync('git diff --name-only HEAD', { encoding: 'utf8' }).trim().split('\n').filter(f => f);
            
            const tree = [];
            
            for (const file of changedFiles) {
              if (fs.existsSync(file)) {
                const content = fs.readFileSync(file, 'utf8');
                const { data: blob } = await github.rest.git.createBlob({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  content: content,
                  encoding: 'utf-8'
                });
                
                tree.push({
                  path: file,
                  mode: '100644',
                  type: 'blob',
                  sha: blob.sha
                });
              }
            }
            
            if (tree.length === 0) {
              console.log('No files to commit');
              return;
            }
            
            // Create new tree
            const { data: newTree } = await github.rest.git.createTree({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tree: tree,
              base_tree: currentCommit.tree.sha
            });
            
            // Create commit
            const commitMessage = `chore(admin): Execute monthly admin maintenance scripts

            Exécute automatiquement les scripts de maintenance administrative mensuels pour maintenir la qualité et la cohérence du projet. Cette tâche automatisée permet de s'assurer que tous les fichiers de configuration et de documentation sont à jour selon les standards définis.

            chlbri: bri_lvi@icloud.com`;

            const { data: newCommit } = await github.rest.git.createCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              message: commitMessage,
              tree: newTree.sha,
              parents: [currentCommitSha],
              author: {
                name: 'github-actions[bot]',
                email: '41898282+github-actions[bot]@users.noreply.github.com'
              }
            });
            
            // Update reference
            await github.rest.git.updateRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'heads/main',
              sha: newCommit.sha,
              force: false
            });
            
            console.log(`Commit created: ${newCommit.sha}`);

  cleanup:
    name: Cleanup Artifacts
    runs-on: ubuntu-latest
    needs: [admin-update, commit-changes]
    if: always() && needs.admin-update.outputs.changes-detected == 'true'

    steps:
      - name: Delete artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });

            for (const artifact of artifacts.data.artifacts) {
              if (artifact.name === 'updated-workspace') {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id,
                });
              }
            }
