{"version":3,"file":"initialConfig.cjs","sources":["../../../src/states/functions/initialConfig.ts"],"sourcesContent":["import { castings, type types } from '@bemedev/types';\nimport type { NodeConfig } from '../types';\nimport { isAtomic, isParallel } from './checks';\n\nexport type InitialConfig_F = types.Fn<[body: NodeConfig], NodeConfig>;\n\n/**\n * Returns the initial configuration of a state machine.\n *\n * @param body - The state machine configuration to process.\n * @returns The initial configuration of the state machine.\n *\n * @see {@linkcode isAtomic} for checking atomic states\n * @see {@linkcode isParallel} for checking parallel states\n * @see {@linkcode InitialConfig_F} for more details\n * @see {@linkcode t} for type utilities\n */\nexport const initialConfig: InitialConfig_F = body => {\n  const check1 = isAtomic(body);\n  if (check1) return body;\n\n  const check2 = isParallel(body);\n\n  if (check2) {\n    const { states: _states, ...config } = body;\n    const entries1 = Object.entries(_states).map(([key, state]) => {\n      const reduced = initialConfig(state);\n      return castings.arrays.tupleOf(key, reduced);\n    });\n\n    const states = entries1.reduce((acc, [key, value]) => {\n      acc[key] = value;\n      return acc;\n    }, {} as any);\n\n    const out = { ...config, states };\n    return out;\n  }\n\n  const __id = body.initial!;\n\n  const initial = body.states[__id];\n  if (!initial) {\n    const { states: _states, ...config } = body;\n    const entries1 = Object.entries(_states).map(([key, state]) => {\n      const reduced = initialConfig(state);\n      return castings.arrays.tupleOf(key, reduced);\n    });\n\n    const states = entries1.reduce((acc, [key, value]) => {\n      acc[key] = value;\n      return acc;\n    }, {} as any);\n\n    const out = { ...config, states };\n    return out;\n  }\n\n  const check4 = isAtomic(initial);\n  if (check4) {\n    const out = { ...body, states: { [__id]: initial } };\n    return out;\n  }\n\n  const out = {\n    ...body,\n    states: { [__id]: initialConfig(initial) },\n  };\n  return out;\n};\n"],"names":["isAtomic","isParallel","castings"],"mappings":";;;;;;AAMA;;;;;;;;;;AAUG;AACI,MAAM,aAAa,GAAoB,IAAI,IAAG;AACnD,IAAA,MAAM,MAAM,GAAGA,yCAAQ,CAAC,IAAI,CAAC;AAC7B,IAAA,IAAI,MAAM;AAAE,QAAA,OAAO,IAAI;AAEvB,IAAA,MAAM,MAAM,GAAGC,6CAAU,CAAC,IAAI,CAAC;IAE/B,IAAI,MAAM,EAAE;QACV,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,EAAE,GAAG,IAAI;AAC3C,QAAA,MAAM,QAAQ,GAAG,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,KAAI;AAC5D,YAAA,MAAM,OAAO,GAAG,aAAa,CAAC,KAAK,CAAC;YACpC,OAAOC,cAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC;AAC9C,QAAA,CAAC,CAAC;AAEF,QAAA,MAAM,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,KAAK,CAAC,KAAI;AACnD,YAAA,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK;AAChB,YAAA,OAAO,GAAG;QACZ,CAAC,EAAE,EAAS,CAAC;QAEb,MAAM,GAAG,GAAG,EAAE,GAAG,MAAM,EAAE,MAAM,EAAE;AACjC,QAAA,OAAO,GAAG;IACZ;AAEA,IAAA,MAAM,IAAI,GAAG,IAAI,CAAC,OAAQ;IAE1B,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;IACjC,IAAI,CAAC,OAAO,EAAE;QACZ,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,EAAE,GAAG,IAAI;AAC3C,QAAA,MAAM,QAAQ,GAAG,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,KAAI;AAC5D,YAAA,MAAM,OAAO,GAAG,aAAa,CAAC,KAAK,CAAC;YACpC,OAAOA,cAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC;AAC9C,QAAA,CAAC,CAAC;AAEF,QAAA,MAAM,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,KAAK,CAAC,KAAI;AACnD,YAAA,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK;AAChB,YAAA,OAAO,GAAG;QACZ,CAAC,EAAE,EAAS,CAAC;QAEb,MAAM,GAAG,GAAG,EAAE,GAAG,MAAM,EAAE,MAAM,EAAE;AACjC,QAAA,OAAO,GAAG;IACZ;AAEA,IAAA,MAAM,MAAM,GAAGF,yCAAQ,CAAC,OAAO,CAAC;IAChC,IAAI,MAAM,EAAE;AACV,QAAA,MAAM,GAAG,GAAG,EAAE,GAAG,IAAI,EAAE,MAAM,EAAE,EAAE,CAAC,IAAI,GAAG,OAAO,EAAE,EAAE;AACpD,QAAA,OAAO,GAAG;IACZ;AAEA,IAAA,MAAM,GAAG,GAAG;AACV,QAAA,GAAG,IAAI;QACP,MAAM,EAAE,EAAE,CAAC,IAAI,GAAG,aAAa,CAAC,OAAO,CAAC,EAAE;KAC3C;AACD,IAAA,OAAO,GAAG;AACZ;;;;"}