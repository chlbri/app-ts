{"version":3,"file":"nextSV.js","sources":["../../../src/states/functions/nextSV.ts"],"sourcesContent":["import { DEFAULT_DELIMITER } from '#constants';\nimport { isString } from '#types';\nimport {\n  deleteFirst,\n  isStringEmpty,\n  recomposeSV,\n  replaceAll,\n} from '#utils';\nimport { isDefined } from '@bemedev/basifun';\nimport { decompose, decomposeKeys, recompose } from '@bemedev/decompose';\nimport { castings } from '@bemedev/types';\nimport type { StateValue } from '../types';\n\nexport type NextStateValue_F = <T extends StateValue>(\n  from: T,\n  target?: string | undefined,\n) => StateValue;\n\n/**\n * Returns the next state value based on the current state value and a target string.\n *\n * @param from - The current state value, which can be a string or an object.\n * @param target - The target string to transition to. If not provided, the function returns the current state value.\n * @returns The next state value based on the provided conditions.\n *\n * @see {@linkcode NextStateValue_F} for more type details of this function.\n * @see {@linkcode isStringEmpty} for checking if a string is empty\n * @see {@linkcode isDefined} for checking if a value is defined\n * @see {@linkcode isString} for checking if a value is a string\n * @see {@linkcode decompose} for decomposing objects into key-value pairs\n * @see {@linkcode recompose} for recomposing key-value pairs into an object\n * @see {@linkcode recomposeSV} for recomposing state values\n * @see {@linkcode replaceAll} for replacing all occurrences of a substring in a string\n * @see {@linkcode deleteFirst} for deleting the first occurrence of a substring in a string\n * @see {@linkcode decomposeKeys} for getting the keys of an object after decomposition\n * @see {@linkcode DEFAULT_DELIMITER} for the default delimiter used in state paths\n */\nexport const nextSV: NextStateValue_F = (from, target) => {\n  const isFromEmpty = isStringEmpty(from);\n  if (isFromEmpty) return {};\n\n  const isTargetDefined = isDefined(target);\n  if (!isTargetDefined) return from;\n\n  const targetIsEmpty = isStringEmpty(target);\n  if (targetIsEmpty) return from;\n\n  const check11 = !target.startsWith('/');\n  if (check11) return from;\n\n  const check2 = isString(from);\n\n  if (check2) {\n    const check31 = target.includes(`${from}/`);\n\n    if (check31) {\n      const out = recomposeSV(target);\n      return out;\n    }\n    return target;\n  }\n\n  const keys = Object.keys(from);\n\n  const check4 = keys.length === 0;\n  if (check4) return from;\n\n  const decomposed = castings.commons.any(\n    decompose(castings.objects.trueObject.forceCast(from), {\n      start: false,\n    }),\n  );\n\n  const last = target.lastIndexOf(DEFAULT_DELIMITER);\n\n  const entry = target.substring(0, last);\n\n  const _target2 = replaceAll({\n    entry,\n    match: DEFAULT_DELIMITER,\n    replacement: '.',\n  });\n\n  const target2 = deleteFirst(_target2, '.');\n  const keysD = decomposeKeys(from);\n  const check5 = keysD.includes(target2 as any);\n\n  if (check5) {\n    decomposed[target2] = target.substring(last + 1);\n  } else return target;\n\n  const out: any = recompose(decomposed);\n  return out;\n};\n"],"names":[],"mappings":";;;;;;;;;;;;;;;AAkBA;;;;;;;;;;;;;;;;;;AAkBG;MACU,MAAM,GAAqB,CAAC,IAAI,EAAE,MAAM,KAAI;AACvD,IAAA,MAAM,WAAW,GAAG,aAAa,CAAC,IAAI,CAAC;AACvC,IAAA,IAAI,WAAW;AAAE,QAAA,OAAO,EAAE;AAE1B,IAAA,MAAM,eAAe,GAAG,SAAS,CAAC,MAAM,CAAC;AACzC,IAAA,IAAI,CAAC,eAAe;AAAE,QAAA,OAAO,IAAI;AAEjC,IAAA,MAAM,aAAa,GAAG,aAAa,CAAC,MAAM,CAAC;AAC3C,IAAA,IAAI,aAAa;AAAE,QAAA,OAAO,IAAI;IAE9B,MAAM,OAAO,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC;AACvC,IAAA,IAAI,OAAO;AAAE,QAAA,OAAO,IAAI;AAExB,IAAA,MAAM,MAAM,GAAG,QAAQ,CAAC,IAAI,CAAC;IAE7B,IAAI,MAAM,EAAE;QACV,MAAM,OAAO,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAA,EAAG,IAAI,CAAA,CAAA,CAAG,CAAC;QAE3C,IAAI,OAAO,EAAE;AACX,YAAA,MAAM,GAAG,GAAG,WAAW,CAAC,MAAM,CAAC;AAC/B,YAAA,OAAO,GAAG;QACZ;AACA,QAAA,OAAO,MAAM;IACf;IAEA,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;AAE9B,IAAA,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,KAAK,CAAC;AAChC,IAAA,IAAI,MAAM;AAAE,QAAA,OAAO,IAAI;IAEvB,MAAM,UAAU,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,CACrC,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;AACrD,QAAA,KAAK,EAAE,KAAK;AACb,KAAA,CAAC,CACH;IAED,MAAM,IAAI,GAAG,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC;IAElD,MAAM,KAAK,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC;IAEvC,MAAM,QAAQ,GAAG,UAAU,CAAC;QAC1B,KAAK;AACL,QAAA,KAAK,EAAE,iBAAiB;AACxB,QAAA,WAAW,EAAE,GAAG;AACjB,KAAA,CAAC;IAEF,MAAM,OAAO,GAAG,WAAW,CAAC,QAAQ,EAAE,GAAG,CAAC;AAC1C,IAAA,MAAM,KAAK,GAAG,aAAa,CAAC,IAAI,CAAC;IACjC,MAAM,MAAM,GAAG,KAAK,CAAC,QAAQ,CAAC,OAAc,CAAC;IAE7C,IAAI,MAAM,EAAE;AACV,QAAA,UAAU,CAAC,OAAO,CAAC,GAAG,MAAM,CAAC,SAAS,CAAC,IAAI,GAAG,CAAC,CAAC;IAClD;;AAAO,QAAA,OAAO,MAAM;AAEpB,IAAA,MAAM,GAAG,GAAQ,SAAS,CAAC,UAAU,CAAC;AACtC,IAAA,OAAO,GAAG;AACZ;;;;"}