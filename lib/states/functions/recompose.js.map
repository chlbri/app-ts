{"version":3,"file":"recompose.js","sources":["../../../src/states/functions/recompose.ts"],"sourcesContent":["import { DEFAULT_DELIMITER } from '#constants';\nimport { merge } from '#utils';\nimport type { NodeConfig } from '../types';\n\ntype Url_F = <T>(shape: string, value: T) => any;\n\n/**\n * Recompose an object URL based on the provided shape and value.\n *\n * @param shape - The shape of the URL to recompose.\n * @param value - The value to recompose into the URL.\n * @returns A recomposed object URL.\n *\n * @see {@linkcode Url_F} for type details.\n * @see {@linkcode DEFAULT_DELIMITER} for the default delimiter used in the URL.\n */\nconst recomposeObjectUrl: Url_F = (shape, value) => {\n  const obj: any = {};\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const { states, ...rest } = value as any;\n\n  if (shape === DEFAULT_DELIMITER) {\n    return rest;\n  }\n\n  const keys = shape.split(DEFAULT_DELIMITER).filter(str => str !== '');\n\n  obj.states = {};\n  if (keys.length === 1) {\n    const key = keys.shift()!;\n    obj.states[key] = value;\n  } else {\n    const key = keys.shift()!;\n    const _value = recomposeObjectUrl(keys.join(DEFAULT_DELIMITER), value);\n\n    obj.states[key] = _value;\n  }\n  return obj;\n};\n\nexport type RecomposeConfig_F = <T extends NodeConfig>(\n  shape: T,\n) => NodeConfig;\n\n/**\n * Recompose a configuration object into a nested structure based on the provided shape.\n *\n * @param shape - The shape of the configuration to recompose.\n * @returns A recomposed configuration object.\n *\n * @see {@linkcode RecomposeConfig_F} for type details.\n * @see {@linkcode recomposeObjectUrl} for the implementation of the recomposition logic.\n * @see {@linkcode merge} for merging objects.\n */\nexport const recomposeConfig: RecomposeConfig_F = shape => {\n  const entries = Object.entries(shape);\n  const arr: any[] = [];\n  entries.forEach(([key, value]) => {\n    arr.push(recomposeObjectUrl(key, value));\n  });\n\n  const output = merge(...(arr as [any, ...any[]]));\n  return output as any;\n};\n"],"names":[],"mappings":";;;;;;;;;AAMA;;;;;;;;;AASG;AACH,MAAM,kBAAkB,GAAU,CAAC,KAAK,EAAE,KAAK,KAAI;IACjD,MAAM,GAAG,GAAQ,EAAE;;IAEnB,MAAM,EAAE,MAAM,EAAE,GAAG,IAAI,EAAE,GAAG,KAAY;AAExC,IAAA,IAAI,KAAK,KAAK,iBAAiB,EAAE;AAC/B,QAAA,OAAO,IAAI;IACb;AAEA,IAAA,MAAM,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC,MAAM,CAAC,GAAG,IAAI,GAAG,KAAK,EAAE,CAAC;AAErE,IAAA,GAAG,CAAC,MAAM,GAAG,EAAE;AACf,IAAA,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;AACrB,QAAA,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,EAAG;AACzB,QAAA,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK;IACzB;SAAO;AACL,QAAA,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,EAAG;AACzB,QAAA,MAAM,MAAM,GAAG,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,EAAE,KAAK,CAAC;AAEtE,QAAA,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,MAAM;IAC1B;AACA,IAAA,OAAO,GAAG;AACZ,CAAC;AAMD;;;;;;;;;AASG;AACI,MAAM,eAAe,GAAsB,KAAK,IAAG;IACxD,MAAM,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC;IACrC,MAAM,GAAG,GAAU,EAAE;IACrB,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,KAAI;QAC/B,GAAG,CAAC,IAAI,CAAC,kBAAkB,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;AAC1C,IAAA,CAAC,CAAC;AAEF,IAAA,MAAM,MAAM,GAAG,KAAK,CAAC,GAAI,GAAuB,CAAC;AACjD,IAAA,OAAO,MAAa;AACtB;;;;"}