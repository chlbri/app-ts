{"version":3,"file":"resolveNode.cjs","sources":["../../../src/states/functions/resolveNode.ts"],"sourcesContent":["import { toAction } from '#actions';\nimport type { EventsMap, PromiseeMap } from '#events';\nimport type { SimpleMachineOptions } from '#machines';\nimport { toPromise } from '#promises';\nimport { toTransition } from '#transitions';\nimport { toArray } from '@bemedev/basifun';\nimport { identify } from '@bemedev/basifun/objects/identify';\nimport { castings, type types } from '@bemedev/types';\nimport type { Node, NodeConfigWithInitials } from '../types';\nimport { stateType } from './stateType';\n\nexport type ResolveNode_F = <\n  E extends EventsMap = EventsMap,\n  P extends PromiseeMap = PromiseeMap,\n  Pc = any,\n  Tc extends types.PrimitiveObject = types.PrimitiveObject,\n>(\n  events: E,\n  promisees: P,\n  config: NodeConfigWithInitials,\n  options?: types.NOmit<SimpleMachineOptions<E, P, Pc, Tc>, 'initials'>,\n) => Node<E, P, Pc, Tc>;\n\n/**\n * Resolves a node configuration into a full node with all functions.\n *\n * @param events - The events map used for action and transition resolution.\n * @param promisees - The promisees map used for promise resolution.\n * @param config - The node configuration to resolve.\n * @param options - Optional machine options that may include actions and promises configurations.\n * @returns A structured representation of the node with its properties and transitions.\n *\n * @see {@linkcode ResolveNode_F} for more details\n * @see {@linkcode toAction} for converting actions\n * @see {@linkcode toTransition} for converting transitions\n * @see {@linkcode toPromise} for converting promises\n * @see {@linkcode toArray.typed} for ensuring typed arrays\n * @see {@linkcode stateType} for determining the type of the state\n * @see {@linkcode identify} for identifying properties in the configuration\n *\n */\nexport const resolveNode: ResolveNode_F = (\n  events,\n  promisees,\n  config,\n  options,\n) => {\n  // #region functions for mapping\n  const aMapper = (action: any) => {\n    return toAction(events, promisees, action, options?.actions);\n  };\n\n  const tMapper = (config: any) => {\n    return toTransition(events, promisees, config, options);\n  };\n  // #endregion\n\n  const { description, initial, tags: _tags } = config;\n  const __id = (config as any).__id;\n  const type = stateType(config);\n  const tags = toArray.typed(_tags);\n  const entry = toArray.typed(config.entry).map(aMapper);\n  const exit = toArray.typed(config.exit).map(aMapper);\n\n  const states = identify(config.states).map(config =>\n    resolveNode(events, promisees, config, options),\n  );\n\n  const on = identify(config.on).map(tMapper);\n  const always = toArray.typed(config.always).map(tMapper);\n  const after = identify(config.after).map(tMapper);\n  const promises = toArray\n    .typed(config.promises)\n    .map(promise => toPromise(events, promisees, promise, options));\n\n  const out = castings.commons.any({\n    type,\n    entry,\n    exit,\n    tags,\n    states,\n    on,\n    always,\n    after,\n    promises,\n  });\n\n  if (__id) out.__id = __id;\n  if (initial) out.initial = initial;\n  if (description) out.description = description;\n\n  return out;\n};\n"],"names":["toAction","toTransition","stateType","toArray","identify","toPromise","castings"],"mappings":";;;;;;;;;;;;;;;;AAuBA;;;;;;;;;;;;;;;;;AAiBG;AACI,MAAM,WAAW,GAAkB,CACxC,MAAM,EACN,SAAS,EACT,MAAM,EACN,OAAO,KACL;;AAEF,IAAA,MAAM,OAAO,GAAG,CAAC,MAAW,KAAI;AAC9B,QAAA,OAAOA,mCAAQ,CAAC,MAAM,EAAE,SAAS,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,CAAC;AAC9D,IAAA,CAAC;AAED,IAAA,MAAM,OAAO,GAAG,CAAC,MAAW,KAAI;QAC9B,OAAOC,+CAAY,CAAC,MAAM,EAAE,SAAS,EAAE,MAAM,EAAE,OAAO,CAAC;AACzD,IAAA,CAAC;;IAGD,MAAM,EAAE,WAAW,EAAE,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM;AACpD,IAAA,MAAM,IAAI,GAAI,MAAc,CAAC,IAAI;AACjC,IAAA,MAAM,IAAI,GAAGC,oCAAS,CAAC,MAAM,CAAC;IAC9B,MAAM,IAAI,GAAGC,eAAO,CAAC,KAAK,CAAC,KAAK,CAAC;AACjC,IAAA,MAAM,KAAK,GAAGA,eAAO,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC;AACtD,IAAA,MAAM,IAAI,GAAGA,eAAO,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC;IAEpD,MAAM,MAAM,GAAGC,iBAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,MAAM,IAC/C,WAAW,CAAC,MAAM,EAAE,SAAS,EAAE,MAAM,EAAE,OAAO,CAAC,CAChD;AAED,IAAA,MAAM,EAAE,GAAGA,iBAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC;AAC3C,IAAA,MAAM,MAAM,GAAGD,eAAO,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC;AACxD,IAAA,MAAM,KAAK,GAAGC,iBAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC;IACjD,MAAM,QAAQ,GAAGD;AACd,SAAA,KAAK,CAAC,MAAM,CAAC,QAAQ;AACrB,SAAA,GAAG,CAAC,OAAO,IAAIE,sCAAS,CAAC,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;AAEjE,IAAA,MAAM,GAAG,GAAGC,cAAQ,CAAC,OAAO,CAAC,GAAG,CAAC;QAC/B,IAAI;QACJ,KAAK;QACL,IAAI;QACJ,IAAI;QACJ,MAAM;QACN,EAAE;QACF,MAAM;QACN,KAAK;QACL,QAAQ;AACT,KAAA,CAAC;AAEF,IAAA,IAAI,IAAI;AAAE,QAAA,GAAG,CAAC,IAAI,GAAG,IAAI;AACzB,IAAA,IAAI,OAAO;AAAE,QAAA,GAAG,CAAC,OAAO,GAAG,OAAO;AAClC,IAAA,IAAI,WAAW;AAAE,QAAA,GAAG,CAAC,WAAW,GAAG,WAAW;AAE9C,IAAA,OAAO,GAAG;AACZ;;;;"}