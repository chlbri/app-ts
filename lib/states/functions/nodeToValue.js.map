{"version":3,"file":"nodeToValue.js","sources":["../../../src/states/functions/nodeToValue.ts"],"sourcesContent":["import { castings } from '@bemedev/types';\nimport type { NodeConfig, StateValue } from '../types';\nimport { isAtomic, isCompound } from './checks';\n\nexport type NodeToValue_F = (body: NodeConfig) => StateValue;\n\n/**\n * Converts a state machine config into a StateValue.\n *\n * @param body - The state machine configuration to process.\n * @returns A value representation of the state machine, which can be a string,\n *         an object, or an empty object if the state is atomic.\n *\n * @see {@linkcode NodeToValue_F} for more details\n * @see {@linkcode isAtomic} for checking atomic states\n * @see {@linkcode isCompound} for checking compound states\n * @see {@linkcode t} for type utilities\n */\nexport const nodeToValue: NodeToValue_F = body => {\n  const check1 = isAtomic(body);\n  if (check1) return {};\n\n  const entries = Object.entries(body.states);\n\n  const check2 = isCompound(body);\n\n  if (check2) {\n    // const length = entries.length;\n    const __id = body.initial;\n    const initial = body.states[__id];\n\n    const check4 = !!initial && isAtomic(initial);\n\n    if (check4) return __id;\n    const keys = Object.keys(body.states);\n    const check6 = keys.length === 1;\n    if (check6) {\n      const key = keys[0];\n      const value = body.states[key];\n      const check7 = isAtomic(value);\n      if (check7) return key;\n    }\n  }\n\n  const entries2 = entries.map(([key, value]) =>\n    castings.arrays.tupleOf(key, nodeToValue(value)),\n  );\n\n  const out = entries2.reduce((acc, [key, value]) => {\n    acc[key] = value;\n    return acc;\n  }, {} as any);\n\n  return out;\n};\n"],"names":[],"mappings":";;;;AAMA;;;;;;;;;;;AAWG;AACI,MAAM,WAAW,GAAkB,IAAI,IAAG;AAC/C,IAAA,MAAM,MAAM,GAAG,QAAQ,CAAC,IAAI,CAAC;AAC7B,IAAA,IAAI,MAAM;AAAE,QAAA,OAAO,EAAE;IAErB,MAAM,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC;AAE3C,IAAA,MAAM,MAAM,GAAG,UAAU,CAAC,IAAI,CAAC;IAE/B,IAAI,MAAM,EAAE;;AAEV,QAAA,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO;QACzB,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;QAEjC,MAAM,MAAM,GAAG,CAAC,CAAC,OAAO,IAAI,QAAQ,CAAC,OAAO,CAAC;AAE7C,QAAA,IAAI,MAAM;AAAE,YAAA,OAAO,IAAI;QACvB,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;AACrC,QAAA,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,KAAK,CAAC;QAChC,IAAI,MAAM,EAAE;AACV,YAAA,MAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC;YACnB,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;AAC9B,YAAA,MAAM,MAAM,GAAG,QAAQ,CAAC,KAAK,CAAC;AAC9B,YAAA,IAAI,MAAM;AAAE,gBAAA,OAAO,GAAG;QACxB;IACF;AAEA,IAAA,MAAM,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,KACxC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,EAAE,WAAW,CAAC,KAAK,CAAC,CAAC,CACjD;AAED,IAAA,MAAM,GAAG,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,KAAK,CAAC,KAAI;AAChD,QAAA,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK;AAChB,QAAA,OAAO,GAAG;IACZ,CAAC,EAAE,EAAS,CAAC;AAEb,IAAA,OAAO,GAAG;AACZ;;;;"}