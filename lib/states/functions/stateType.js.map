{"version":3,"file":"stateType.js","sources":["../../../src/states/functions/stateType.ts"],"sourcesContent":["import type { types } from '@bemedev/types';\n\nimport type { NodeConfig, StateType } from '../types';\n\nexport type StateType_F = types.Fn<[state: NodeConfig], StateType>;\n\n/**\n * Determines the type of state based on its configuration.\n *\n * @param config - The state configuration object.\n * @returns The type of the state: 'atomic', 'compound', or the specified type.\n *\n * @see {@linkcode StateType_F} for more details.\n */\nexport const stateType: StateType_F = config => {\n  const type = config.type;\n  if (type) return type;\n  const states = (config as any).states;\n  if (states) {\n    const len = Object.keys(states).length;\n    if (len > 0) {\n      return 'compound';\n    }\n  }\n\n  return 'atomic';\n};\n"],"names":[],"mappings":"AAMA;;;;;;;AAOG;AACI,MAAM,SAAS,GAAgB,MAAM,IAAG;AAC7C,IAAA,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI;AACxB,IAAA,IAAI,IAAI;AAAE,QAAA,OAAO,IAAI;AACrB,IAAA,MAAM,MAAM,GAAI,MAAc,CAAC,MAAM;IACrC,IAAI,MAAM,EAAE;QACV,MAAM,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM;AACtC,QAAA,IAAI,GAAG,GAAG,CAAC,EAAE;AACX,YAAA,OAAO,UAAU;QACnB;IACF;AAEA,IAAA,OAAO,QAAQ;AACjB;;;;"}