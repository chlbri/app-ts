{"version":3,"file":"src.cjs","sources":["../../../src/promises/functions/src.ts"],"sourcesContent":["import type { EventsMap, PromiseeMap } from '#events';\nimport type { SimpleMachineOptions } from '#machines';\nimport { reduceFnMap } from '#utils';\nimport type { types } from '@bemedev/types';\nimport type { PromiseFunction2 } from '../types';\n\nexport type ToPromiseSrc_F = <\n  E extends EventsMap = EventsMap,\n  P extends PromiseeMap = PromiseeMap,\n  Pc extends types.PrimitiveObject = types.PrimitiveObject,\n  TC extends types.PrimitiveObject = types.PrimitiveObject,\n>(\n  events: E,\n  promisees: P,\n  src: string,\n  promises?: SimpleMachineOptions<E, P, Pc, TC>['promises'],\n) => PromiseFunction2<E, P, Pc, TC> | undefined;\n\n/**\n * Converts a source string to a function that can be used to retrieve the promise.\n * @param events of type {@linkcode EventsMap}, the events map.\n * @param promisees of type {@linkcode PromiseeMap}, the promisees map.\n * @param src of type string, the source string to convert.\n * @param promises of type {@linkcode SimpleMachineOptions}, the machine options containing promises.\n * @returns a function that retrieves the promise or undefined if not found.\n *\n * @see {@linkcode reduceFnMap} for reducing the function map.\n * @see {@linkcode PromiseFunction2} for more details\n */\nexport const toPromiseSrc: ToPromiseSrc_F = (\n  events,\n  promisees,\n  src,\n  promises,\n) => {\n  const fn = promises?.[src];\n  const func = fn ? reduceFnMap(events, promisees, fn) : undefined;\n  return func;\n};\n"],"names":["reduceFnMap"],"mappings":";;;;;;;;;;AAkBA;;;;;;;;;;AAUG;AACI,MAAM,YAAY,GAAmB,CAC1C,MAAM,EACN,SAAS,EACT,GAAG,EACH,QAAQ,KACN;AACF,IAAA,MAAM,EAAE,GAAG,QAAQ,GAAG,GAAG,CAAC;AAC1B,IAAA,MAAM,IAAI,GAAG,EAAE,GAAGA,6BAAW,CAAC,MAAM,EAAE,SAAS,EAAE,EAAE,CAAC,GAAG,SAAS;AAChE,IAAA,OAAO,IAAI;AACb;;;;"}