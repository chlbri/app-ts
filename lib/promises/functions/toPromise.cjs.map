{"version":3,"file":"toPromise.cjs","sources":["../../../src/promises/functions/toPromise.ts"],"sourcesContent":["import type { EventsMap, PromiseeMap } from '#events';\nimport type { SimpleMachineOptions } from '#machines';\nimport type { PromiseeConfig } from '#promises';\nimport { toTransition } from '#transitions';\nimport { toArray } from '@bemedev/basifun';\nimport type { types } from '@bemedev/types';\nimport type { Promisee } from '../types';\nimport { toPromiseSrc } from './src';\n\ntype ToPromise_F = <\n  E extends EventsMap = EventsMap,\n  P extends PromiseeMap = PromiseeMap,\n  Pc extends types.PrimitiveObject = types.PrimitiveObject,\n  TC extends types.PrimitiveObject = types.PrimitiveObject,\n>(\n  events: E,\n  promisees: P,\n  src: PromiseeConfig,\n  promises?: types.NOmit<SimpleMachineOptions<E, P, Pc, TC>, 'initials'>,\n) => Promisee<E, P, Pc, TC>;\n\n/**\n * Converts a promise config to a promisee object with a source and transitions.\n * @param events of type {@linkcode EventsMap}, the events map.\n * @param promisees of type {@linkcode PromiseeMap}, the promisees map.\n * @param promise of type {@linkcode PromiseeConfig}, the promise configuration to convert.\n * @param options of type {@linkcode SimpleMachineOptions}, the machine options.\n * @returns a promisee object with a source and transitions.\n *\n * @see {@linkcode toPromiseSrc} for converting the source.\n * @see {@linkcode toTransition} for converting transitions.\n * @see {@linkcode toArray.typed} for the type of the context.\n * @see {@linkcode ToPromise_F} formore details\n */\nexport const toPromise: ToPromise_F = (\n  events,\n  promisees,\n  promise,\n  options,\n) => {\n  const src = toPromiseSrc(\n    events,\n    promisees,\n    promise.src,\n    options?.promises,\n  );\n\n  const then = toArray\n    .typed(promise.then)\n    .map(config => toTransition(events, promisees, config, options));\n\n  const _catch = toArray\n    .typed(promise.catch)\n    .map(config => toTransition(events, promisees, config, options));\n\n  const _finally = toArray.typed(promise.finally).map(config => {\n    const check1 = typeof config === 'object' && 'actions' in config;\n    if (check1) return toTransition(events, promisees, config, options);\n\n    return toTransition(events, promisees, { actions: config }, options);\n  });\n\n  const out = { src, then, catch: _catch, finally: _finally } as any;\n\n  const { description } = promise;\n  if (description) out.description = description;\n\n  return out;\n};\n"],"names":["toPromiseSrc","toArray","toTransition"],"mappings":";;;;;;AAqBA;;;;;;;;;;;;AAYG;AACI,MAAM,SAAS,GAAgB,CACpC,MAAM,EACN,SAAS,EACT,OAAO,EACP,OAAO,KACL;AACF,IAAA,MAAM,GAAG,GAAGA,mCAAY,CACtB,MAAM,EACN,SAAS,EACT,OAAO,CAAC,GAAG,EACX,OAAO,EAAE,QAAQ,CAClB;IAED,MAAM,IAAI,GAAGC;AACV,SAAA,KAAK,CAAC,OAAO,CAAC,IAAI;AAClB,SAAA,GAAG,CAAC,MAAM,IAAIC,+CAAY,CAAC,MAAM,EAAE,SAAS,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;IAElE,MAAM,MAAM,GAAGD;AACZ,SAAA,KAAK,CAAC,OAAO,CAAC,KAAK;AACnB,SAAA,GAAG,CAAC,MAAM,IAAIC,+CAAY,CAAC,MAAM,EAAE,SAAS,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;AAElE,IAAA,MAAM,QAAQ,GAAGD,eAAO,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,MAAM,IAAG;QAC3D,MAAM,MAAM,GAAG,OAAO,MAAM,KAAK,QAAQ,IAAI,SAAS,IAAI,MAAM;AAChE,QAAA,IAAI,MAAM;YAAE,OAAOC,+CAAY,CAAC,MAAM,EAAE,SAAS,EAAE,MAAM,EAAE,OAAO,CAAC;AAEnE,QAAA,OAAOA,+CAAY,CAAC,MAAM,EAAE,SAAS,EAAE,EAAE,OAAO,EAAE,MAAM,EAAE,EAAE,OAAO,CAAC;AACtE,IAAA,CAAC,CAAC;AAEF,IAAA,MAAM,GAAG,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAS;AAElE,IAAA,MAAM,EAAE,WAAW,EAAE,GAAG,OAAO;AAC/B,IAAA,IAAI,WAAW;AAAE,QAAA,GAAG,CAAC,WAAW,GAAG,WAAW;AAE9C,IAAA,OAAO,GAAG;AACZ;;;;"}