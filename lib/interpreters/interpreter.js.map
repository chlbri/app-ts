{"version":3,"file":"interpreter.js","sources":["../../src/interpreters/interpreter.ts"],"sourcesContent":["import {\n  reduceAction,\n  toAction,\n  type ActionConfig,\n  type ActionResult,\n} from '#actions';\nimport {\n  DEFAULT_DELIMITER,\n  DEFAULT_MAX_SELF_TRANSITIONS,\n  DEFAULT_MAX_TIME_PROMISE,\n  DEFAULT_MIN_ACTIVITY_TIME,\n} from '#constants';\nimport { toDelay } from '#delays';\nimport {\n  eventToType,\n  INIT_EVENT,\n  possibleEvents,\n  transformEventArg,\n  type EventArg,\n  type EventArgT,\n  type EventObject,\n  type EventsMap,\n  type InitEvent,\n  type PromiseeMap,\n  type ToEvents,\n  type ToEventsR,\n} from '#events';\nimport { toPredicate, type GuardConfig } from '#guards';\nimport { getEntries, getExits, type Machine } from '#machine';\nimport {\n  assignByKey,\n  ChildS,\n  getByKey,\n  mergeByKey,\n  reduceEvents,\n  toMachine,\n  type AnyMachine,\n  type ChildS2,\n  type Config,\n  type ConfigFrom,\n  type ContextFrom,\n  type EventsMapFrom,\n  type ExtendedActionsParams,\n  type GetEventsFromConfig,\n  type MachineConfig,\n  type MachineOptions,\n  type MachineOptionsFrom,\n  type PrivateContextFrom,\n  type PromiseesMapFrom,\n  type ScheduledData,\n  type SimpleMachineOptions2,\n} from '#machines';\nimport {\n  PromiseeConfig,\n  toPromiseSrc,\n  type PromiseeResult,\n} from '#promises';\nimport {\n  flatMap,\n  initialConfig,\n  nextSV,\n  Node,\n  nodeToValue,\n  resolveNode,\n  type ActivityConfig,\n  type NodeConfig,\n  type StateValue,\n} from '#states';\nimport type {\n  AlwaysConfig,\n  DelayedTransitions,\n  TransitionConfig,\n} from '#transitions';\nimport {\n  IS_TEST,\n  isStringEmpty,\n  merge,\n  reduceFnMap,\n  replaceAll,\n} from '#utils';\nimport {\n  anyPromises,\n  asyncfy,\n  isDefined,\n  partialCall,\n  switchV,\n  toArray,\n  withTimeout,\n  type TimeoutPromise,\n} from '@bemedev/basifun';\nimport { decomposeSV } from '@bemedev/decompose';\nimport {\n  createInterval,\n  createTimeout,\n  type Interval2,\n  type Timeout2,\n} from '@bemedev/interval2';\nimport sleep from '@bemedev/sleep';\nimport { castings, type types } from '@bemedev/types';\nimport cloneDeep from 'clone-deep';\nimport equal from 'fast-deep-equal';\nimport { isDescriber, type RecordS } from '~types';\nimport type {\n  _Send_F,\n  AddSubscriber_F,\n  AnyInterpreter,\n  Collected0,\n  CreateInterval2_F,\n  DiffNext,\n  ExecuteActivities_F,\n  Interpreter_F,\n  Mode,\n  PerformAction_F,\n  PerformActionLater_F,\n  PerformAfter_F,\n  PerformAlway_F,\n  PerformDelay_F,\n  PerformPredicate_F,\n  PerformPromise_F,\n  PerformPromisee_F,\n  PerformTransition_F,\n  PerformTransitions_F,\n  Selector_F,\n  State,\n  StateExtended,\n  WorkingStatus,\n} from './interpreter.types';\nimport { Scheduler } from './scheduler';\n\nimport { createSubscriber, type SubscriberClass } from './subscriber';\n\n/**\n * The `Interpreter` class is responsible for interpreting and managing the state of a machine.\n * It provides methods to start, stop, pause, and resume the machine, as well as to send events\n * and subscribe to state changes.\n *\n * @template : type {@linkcode Config} [C] - The configuration type of the machine.\n * @template : [Pc] - The private context type, which can be any type.\n * @template : type {@linkcode types} [Tc] - The context type.\n * @template : type {@linkcode EventsMap} [E] - The events map type, which maps event names to their types.\n * @template : type {@linkcode PromiseeMap} [P] - The promisees map type, which maps promise names to their types.\n * @template Mo : type {@linkcode SimpleMachineOptions2} - The machine options type, which includes various configurations for the machine. Default to {@linkcode MachineOptions}.\n *\n * @implements : {@linkcode AnyInterpreter}\n *\n * @remarks\n * The `Interpreter` class is a core component of the state machine implementation,\n * allowing for the execution of state transitions, handling of events, and management of the machine's lifecycle.\n * It supports various modes of operation, including strict and normal modes,\n * and provides mechanisms for error and warning handling.\n * * It also allows for the execution of actions, predicates, and delays,\n * * as well as the management of child interpreters and scheduled tasks.\n *\n * @see {@linkcode GetEventsFromConfig} for extracting events from the machine configuration.\n */\nexport class Interpreter<\n  const C extends Config = Config,\n  Pc = any,\n  const Tc extends types.PrimitiveObject = types.PrimitiveObject,\n  E extends EventsMap = GetEventsFromConfig<C>,\n  P extends PromiseeMap = PromiseeMap,\n  Mo extends SimpleMachineOptions2 = MachineOptions<C, E, P, Pc, Tc>,\n> implements AnyInterpreter<E, P, Pc, Tc>\n{\n  /**\n   * The {@linkcode Machine} machine being interpreted.\n   */\n  #machine: Machine<C, Pc, Tc, E, P, Mo>;\n\n  /**\n   * The current {@linkcode WorkingStatus} status of the this {@linkcode Interpreter} service.\n   */\n  #status: WorkingStatus = 'idle';\n\n  /**\n   * The current {@linkcode NodeConfigWithInitials} config state of this {@linkcode Interpreter} service.\n   */\n  #config: NodeConfig;\n\n  /**\n   * The {@linkcode RecordS}<{@linkcode NodeConfigWithInitials}> flat representation of all possible config states of this {@linkcode Interpreter} service.\n   */\n  #flat!: RecordS<NodeConfig>;\n\n  /**\n   * The current {@linkcode StateValue}> of this {@linkcode Interpreter} service.\n   */\n  #value!: StateValue;\n\n  /**\n   * The {@linkcode Mode} of this {@linkcode Interpreter} service\n   */\n  #mode: Mode;\n\n  /**\n   * The initial {@linkcode Node} of the inner {@linkcode Machine}.\n   */\n  readonly #initialNode: Node<E, P, Pc, Tc>;\n\n  /**\n   * The current {@linkcode Node} of this {@linkcode Interpreter} service.\n   */\n  #node!: Node<E, P, Pc, Tc>;\n\n  /**\n   * an iiner ietrator to count the number of operations performed by this {@linkcode Interpreter} service.\n   */\n  #iterator = 0;\n\n  /**\n   * The current {@linkcode ToEvents} event of this {@linkcode Interpreter} service.\n   */\n  #event: ToEvents<E, P> | InitEvent = INIT_EVENT;\n\n  /**\n   * The initial {@linkcode NodeConfigWithInitials} of the inner {@linkcode Machine}.\n   */\n  readonly #initialConfig: NodeConfig;\n\n  /**\n   * The initial {@linkcode Pc} private context of this {@linkcode Interpreter} service.\n   */\n  #initialPpc!: Pc;\n\n  /**\n   * The initial {@linkcode Tc} context of this {@linkcode Interpreter} service.\n   */\n  #initialContext!: Tc;\n\n  /**\n   * The current {@linkcode Pc} private context of this {@linkcode Interpreter} service.\n   */\n  #pContext!: Pc;\n\n  /**\n   * The current {@linkcode Tc} context of this {@linkcode Interpreter} service.\n   */\n  #context!: Tc;\n\n  /**\n   * The {@linkcode Scheduler} of this {@linkcode Interpreter} service.\n   */\n  #scheduler: Scheduler;\n\n  /**\n   * The previous {@linkcode State} of this {@linkcode Interpreter} service.\n   */\n  #previousState!: State<Tc>;\n\n  /**\n   * The current {@linkcode State} of this {@linkcode Interpreter} service.\n   */\n  #state!: State<Tc, ToEvents<E, P>>;\n\n  /**\n   * All {@linkcode AnyInterpreter2} service subscribers of this {@linkcode Interpreter} service.\n   */\n  #childrenServices: (AnyInterpreter2 & { id: string })[] = [];\n\n  /**\n   * Public getter of the service subscribers of this {@linkcode Interpreter} service.\n   */\n  get children() {\n    return this.#childrenServices;\n  }\n\n  /**\n   * Returns a service subscriber of this {@linkcode Interpreter} service with a specific id.\n   * @param id - The id of the service subscriber to get.\n   * @return The service subscriber {@linkcode AnyInterpreter2} of this {@linkcode Interpreter} service with the specified id, or undefined if not found.\n   *\n   * @see {@linkcode children} for all children.\n   */\n  getChildAt = (id: string) => this.children.find(f => f.id === id);\n\n  /**\n   * Allias of {@linkcode getChildAt} function.\n   */\n  at = this.getChildAt;\n\n  /**\n   * Returns all child machines of this {@linkcode Interpreter}.\n   *\n   * @see {@linkcode toArray.typed} for converting the machines to an array.\n   * @see {@linkcode toMachine} for converting the machine config to a {@linkcode Machine}.\n   * @see {@linkcode isDefined} for filtering out undefined machines.\n   */\n  get #childrenMachines() {\n    const _machines = toArray.typed(this.#machine.config.machines);\n    return _machines.map(this.toMachine).filter(isDefined);\n  }\n\n  /**\n   * The id of the current {@linkcode Interpreter} service.\n   * Used for child machines identification.\n   */\n  id?: string;\n\n  /**\n   * The accessor of {@linkcode Mode} of this {@linkcode Interpreter} service\n   */\n  get mode() {\n    return this.#mode;\n  }\n\n  /**\n   * @deprecated\n   *\n   * Used for typings only\n   * The accessor of current {@linkcode ToEvents} of this {@linkcode Interpreter} service\n   *\n   * @remarks Usually for typings\n   */\n  get event() {\n    return this.#event;\n  }\n\n  /**\n   * The accessor of the map of events from the inner {@linkcode Machine}.\n   */\n  get eventsMap() {\n    return this.#machine.eventsMap;\n  }\n\n  /**\n   * The number of operations scheduled by the inner\n   * //\n   *\n   * {@linkcode Scheduler.performeds} of this {@linkcode Interpreter} service.\n   *\n   * //\n   *\n   * @see {@linkcode Scheduler}\n   */\n  get scheduleds() {\n    return this.#scheduler.performeds;\n  }\n\n  /**\n   * Where everything is initialized\n   * @param machine, the {@linkcode Machine} to interpret.\n   * @param mode, the {@linkcode Mode} of the interpreter, default is 'strict'.\n   * @param exact, whether to use exact intervals or not, default is false.\n   */\n  constructor(\n    machine: Machine<C, Pc, Tc, E, P, Mo>,\n    mode: Mode = 'strict',\n    exact = true,\n  ) {\n    this.#machine = machine.renew;\n\n    this.#config = this.#initialConfig = this.#machine.initialConfig;\n    this.#initialNode = this.#resolveNode(this.#initialConfig);\n    this.#mode = mode;\n    this.#exact = exact;\n    this.#performConfig(true);\n    this.#scheduler = new Scheduler();\n    this.#state = this.#previousState = {\n      status: this.#status,\n      context: this.#context,\n      event: INIT_EVENT,\n      value: this.#value,\n      tags: this.#config.tags,\n    };\n\n    this.#throwing();\n  }\n\n  /**\n   * Checks if the current {@linkcode Mode} mode is 'strict'.\n   */\n  get isStrict() {\n    return this.#mode === 'strict';\n  }\n\n  /**\n   * Checks if the current {@linkcode Mode} mode is 'normal'.\n   */\n  get isNormal() {\n    return this.#mode === 'normal';\n  }\n\n  /**\n   * Use to manage internal errors and warnings.\n   */\n  #throwing = () => {\n    if (this.isStrict) {\n      const check1 = this.#warningsCollector.size > 0;\n      if (check1) {\n        const warnings = this.#displayConsole(this.#warningsCollector);\n        console.log(warnings);\n      }\n\n      /* v8 ignore next 5 */\n      const check2 = this.#errorsCollector.size > 0;\n      if (check2) {\n        const errors = this.#displayConsole(this.#errorsCollector);\n        throw new Error(errors);\n      }\n\n      return;\n    }\n\n    if (this.isNormal) {\n      const check3 = this.#errorsCollector.size > 0;\n      if (check3) {\n        const errors = this.#displayConsole(this.#errorsCollector);\n        console.error(errors);\n      }\n\n      /* v8 ignore next 8 */\n      const check4 = this.#warningsCollector.size > 0;\n      if (check4) {\n        const warnings = this.#displayConsole(this.#warningsCollector);\n        console.log(warnings);\n      }\n\n      return;\n    }\n  };\n\n  /**\n   * Assign the current {@linkcode State} and the previous {@linkcode State} of the {@linkcode Interpreter} service and flush all subscribers.\n   * @param parts, Partial {@linkcode State}\n   *\n   * @see {@linkcode SubscriberClass}\n   * @see {@linkcode SubscriberClass}\n   */\n  #performStates = (parts?: Partial<State<Tc, ToEvents<E, P>>>) => {\n    this.#previousState = cloneDeep(this.#state);\n    this.#state = { ...this.#state, ...parts };\n    this.#flush();\n  };\n\n  /**\n   * Performs computations, after transitioning to the next target, to update the current {@linkcode NodeConfigWithInitials} config state of this {@linkcode Interpreter} service\n   */\n  protected _performConfig = () => {\n    const value = nodeToValue(this.#config);\n    this.#value = value;\n    this.#performStates({ value });\n\n    this.#node = this.#resolveNode(this.#config);\n\n    const configForFlat = castings.commons.unknown<NodeConfig>(\n      this.#config,\n    );\n\n    this.#flat = castings.commons.any(flatMap(configForFlat));\n  };\n\n  /**\n   * Performs computations, to update the current {@linkcode NodeConfigWithInitials} config state of this {@linkcode Interpreter} service\n   * @param target, the target to perform the config for.\n   */\n  #performConfig = (target?: string | true) => {\n    if (target === true) return this._performConfig();\n\n    if (target) {\n      this.#config = this.proposedNextConfig(target);\n      const tags = this.#config.tags;\n      this.#performStates({ tags });\n      return this._performConfig();\n    }\n  };\n\n  protected _iterate = () => this.#iterator++;\n\n  /**\n   * Resolves a {@linkcode Node} from the given {@linkcode NodeConfigWithInitials} configuration.\n   *\n   * @param config of type {@linkcode NodeConfigWithInitials}, the configuration to resolve.\n   *\n   * @returns a {@linkcode Node} resolved from the configuration.\n   *\n   * @see {@linkcode resolveNode} for the actual resolution logic.\n   * @see {@linkcode E}\n   * @see {@linkcode P}\n   * @see {@linkcode Pc}\n   * @see {@linkcode Tc}\n   */\n  #resolveNode = (config: NodeConfig) => {\n    const options = this.#machine.options;\n    const events = this.#machine.eventsMap;\n    const promisees = this.#machine.promiseesMap;\n\n    return resolveNode<E, P, Pc, Tc>(events, promisees, config, options);\n  };\n\n  /**\n   * The accessor of initial {@linkcode Node} of the inner {@linkcode Machine}.\n   */\n  get initialNode() {\n    return this.#initialNode;\n  }\n\n  /**\n   * The accessor of current {@linkcode Node} of this {@linkcode Interpreter} service.\n   */\n  get node() {\n    return this.#node;\n  }\n\n  /**\n   * Set the current {@linkcode Mode} of this {@linkcode Interpreter} service to 'strict'.\n   * In this mode, all errors are thrown and warnings are logged to the console.\n   */\n  makeStrict = () => {\n    this.#mode = 'strict';\n  };\n\n  /**\n   * Set the current {@linkcode Mode} of this {@linkcode Interpreter} service to 'normal'.\n   * In this mode, errors are logged to the console, but not thrown.\n   */\n  makeNormal = () => {\n    this.#mode = 'normal';\n  };\n\n  /**\n   * The public accessor of initial {@linkcode WorkingStatus} status of the this {@linkcode Interpreter} service.\n   */\n  get status() {\n    return this.#status;\n  }\n\n  /**\n   * The public accessor of initial {@linkcode NodeConfigWithInitials} of the inner {@linkcode Machine}.\n   */\n  get initialConfig() {\n    return this.#initialConfig;\n  }\n\n  /**\n   * The public accessor of initial {@linkcode StateValue} of the inner {@linkcode Machine}.\n   */\n  get initialValue() {\n    return this.#machine.initialValue;\n  }\n\n  /**\n   * The public accessor of current {@linkcode NodeConfigWithInitials} config state of this {@linkcode Interpreter} service.\n   */\n  get config() {\n    return this.#config;\n  }\n\n  /**\n   * Create a new {@linkcode Interpreter} instance with the same initial configuration as this instance.\n   */\n  get renew() {\n    const out = new Interpreter(this.#machine);\n    out._ppC(this.#initialPpc);\n    out._provideContext(this.#initialContext);\n\n    return out;\n  }\n\n  /**\n   * The public accessor of current {@linkcode StateValue}> of this {@linkcode Interpreter} service.\n   */\n  get value() {\n    return this.#value;\n  }\n\n  /**\n   * The public accessor of current {@linkcode Tc} context of this {@linkcode Interpreter} service.\n   */\n  get context() {\n    return this.#context;\n  }\n\n  /**\n   * @deprecated\n   * Just use for testing\n   * @returns the current {@linkcode Pc} private context of this {@linkcode Interpreter} service.\n   * @remarks returns nothing in prod\n   *\n   * @see {@linkcode context} to get the current context.\n   */\n  get _pContext() {\n    if (IS_TEST) {\n      return this.#pContext;\n      /* v8 ignore next 4 */\n    }\n    console.error('pContext is not available in production');\n    return;\n  }\n\n  /**\n   * Select a path from the current {@linkcode Tc} context of this {@linkcode Interpreter} service.\n   *\n   * @param path, the key to select from the current {@linkcode Tc} context of this {@linkcode Interpreter} service.\n   *\n   * @returns the value from the path from the current {@linkcode Tc} context of this {@linkcode Interpreter} service.\n   *\n   * @see {@linkcode getByKey} for retrieving values by key.\n   */\n\n  get select(): Selector_F<Tc> {\n    const check = castings.commons.primitive.is(this.#context);\n    if (check) return undefined as any;\n    const out: any = (path: string) => getByKey(this.#context, path);\n    return out as any;\n  }\n\n  /**\n   * @deprecated\n   * Select a path from the current {@linkcode Pc} private context of this {@linkcode Interpreter} service.\n   *\n   * @param path, the key to select from the current {@linkcode Pc} private context of this {@linkcode Interpreter} service.\n   *\n   * @returns the value from the path from the current {@linkcode Pc} private context of this {@linkcode Interpreter} service.\n   *\n   * @remarks returns nothing in prod\n   *\n   * @see {@linkcode getByKey} for retrieving values by key.\n   */\n  get _pSelect(): Selector_F<Pc> {\n    if (IS_TEST) {\n      const pContext = this.#pContext;\n      const check = castings.commons.primitive.is(pContext);\n      if (check) return undefined as any;\n      if (pContext) {\n        const out: any = (path: string) => getByKey(pContext, path);\n        return out as any;\n      }\n      /* v8 ignore next 4 */\n    }\n    console.error('pContext is not available in production');\n    return undefined as any;\n  }\n\n  /**\n   * Set the current {@linkcode WorkingStatus} private context of this {@linkcode Interpreter} service.\n   * @returns 'started'.\n   */\n  #startStatus = (): WorkingStatus => this.#setStatus('started');\n\n  /**\n   * Helper to format inner errors and warnings.\n   * @param messages - an iterable of messages to format.\n   * @returns an array of messages joined by new line.\n   *\n   * @remarks Used to display console messages in a readable format.\n   */\n  #displayConsole = (messages: Iterable<string>) => {\n    return Array.from(messages).join('\\n');\n  };\n\n  /**\n   * Flushes all subscribers and map subscribers of this {@linkcode Interpreter} service.\n   *\n   * @see {@linkcode SubscriberClass} for more information about subscribers.\n   * @see {@linkcode SubscriberClass} for more information about map subscribers.\n   */\n  #flush = () => {\n    this.#flushMapSubscribers();\n  };\n\n  /**\n   * All actions that are currently scheduled to be performed.\n   * @returns an array of {@linkcode Timeout2} that are currently scheduled to be performed.\n   */\n  #timeoutActions: Timeout2[] = [];\n\n  /**\n   * Start this {@linkcode Interpreter} service.\n   */\n  start = () => {\n    this.#throwing();\n    this.#flush();\n    this.#startStatus();\n    this.#scheduler.initialize(this.#startInitialEntries);\n    this.#performChildMachines();\n    this.#throwing();\n\n    return this._next();\n  };\n\n  /**\n   * Pause the collection of all currents {@linkcode Interval2} intervals, related to current {@linkcode ActivityConfig}s of this {@linkcode Interpreter} service.\n   *\n   * @see {@linkcode Scheduler} for more information about scheduling.\n   */\n  #pauseAllActivities = () => {\n    this._cachedIntervals.forEach(this.#pause);\n  };\n\n  /**\n   * Schedule all activities of the current {@linkcode Node} of this {@linkcode Interpreter} service.\n   *\n   * @see {@linkcode Scheduler} for more information about scheduling.\n   */\n  get #schedule() {\n    return this.#scheduler.schedule;\n  }\n\n  /**\n   * Used to track number of self transitions\n   */\n  #selfTransitionsCounter = 0;\n\n  /**\n   * Performs all self transitions and activities of this {@linkcode Interpreter} service.\n   */\n  #next = async () => {\n    this.#selfTransitionsCounter++;\n    this.#pauseAllActivities();\n    this.#performActivities();\n    await this.#performSelfTransitions();\n  };\n\n  /**\n   * Performs all self transitions and activities of this {@linkcode Interpreter} service.\n   * @remarks Throw if the number of self transitions exceeds {@linkcode DEFAULT_MAX_SELF_TRANSITIONS}.\n   */\n  protected _next = async () => {\n    let check = false;\n    do {\n      const startTime = Date.now();\n      const previousValue = this.#value;\n\n      const checkCounter =\n        this.#selfTransitionsCounter >= DEFAULT_MAX_SELF_TRANSITIONS;\n      if (checkCounter) return this.#throwMaxCounter();\n      this.#throwing();\n\n      await this.#next();\n\n      const currentValue = this.#value;\n      check = !equal(previousValue, currentValue);\n\n      if (check) {\n        this.#flush();\n      }\n\n      const duration = Date.now() - startTime;\n      const check2 = duration > TIME_TO_RINIT_SELF_COUNTER;\n      if (check2) this.#selfTransitionsCounter = 0;\n    } while (check);\n\n    this.#selfTransitionsCounter = 0;\n  };\n\n  get #cloneState(): StateExtended<Pc, Tc, ToEvents<E, P>> {\n    const pContext = structuredClone(this.#pContext);\n\n    return structuredClone({ pContext, ...this.#state });\n  }\n\n  #performAction: PerformActionLater_F<E, P, Pc, Tc> = action => {\n    this._iterate();\n    return action(this.#cloneState);\n  };\n\n  #performScheduledAction = (scheduled?: ScheduledData<Pc, Tc>) => {\n    if (!scheduled) return;\n    const { data, ms: timeout, id } = scheduled;\n\n    const callback = () => {\n      const cb = () => this.#mergeContexts(data);\n      this.#schedule(cb);\n    };\n\n    this.#timeoutActions.filter(f => f.id === id).forEach(this.#dispose);\n\n    this.#timeoutActions = this.#timeoutActions.filter(f => f.id !== id);\n\n    const timer = createTimeout({ callback, timeout, id });\n    this.#timeoutActions.push(timer);\n    timer.start();\n  };\n\n  #performSendToAction = (sentEvent?: { to: string; event: any }) => {\n    if (!sentEvent) return;\n    this.#sendTo(sentEvent.to, sentEvent.event);\n  };\n\n  #performResendAction = (resend?: EventArg<E>) => {\n    if (!resend) return;\n    const cannot = this.#cannotPerformEvents(resend);\n    if (cannot) return;\n\n    return this.send(resend);\n  };\n\n  /**\n   * Force transition to performs inner actions despite the current state.\n   * This is useful for sending events that are not part of the current state transitions.\n   * @param transitions, the transitions to perform.\n   * @returns the result of the transitions.\n   *\n   * @see {@linkcode TransitionConfig} for more information about transitions.\n   */\n  #performForceSendAction = (forceSend?: EventArg<E>) => {\n    if (!forceSend) return;\n\n    const values = Object.values(this.#machine.flat);\n    values.forEach(({ on }) => {\n      const type = eventToType(forceSend);\n      const transitions = toArray.typed(on?.[type]);\n      this.#performTransitions(...(transitions as any));\n    });\n  };\n\n  #performPauseActivityAction = (id?: string) => {\n    if (!id) return;\n    this.#currentActivities?.filter(f => f.id === id).forEach(this.#pause);\n  };\n\n  #performResumeActivityAction = (id?: string) => {\n    if (!id) return;\n    this.#currentActivities\n      ?.filter(f => f.id === id)\n      .forEach(this.#resume);\n  };\n\n  #performStopActivityAction = (id?: string) => {\n    if (!id) return;\n    this.#currentActivities\n      ?.filter(f => f.id === id)\n      .forEach(this.#dispose);\n  };\n\n  #performPauseTimerAction = (id?: string) => {\n    if (!id) return;\n    this.#timeoutActions.filter(f => f.id === id).forEach(this.#pause);\n  };\n\n  #performResumeTimerAction = (id?: string) => {\n    if (!id) return;\n    this.#timeoutActions.filter(f => f.id === id).forEach(this.#resume);\n  };\n\n  #performStopTimerAction = (id?: string) => {\n    if (!id) return;\n    this.#timeoutActions.filter(f => f.id === id).forEach(this.#stop);\n  };\n\n  #performsExtendedActions = ({\n    forceSend,\n    resend,\n    scheduled,\n    pauseActivity,\n    resumeActivity,\n    stopActivity,\n    pauseTimer,\n    resumeTimer,\n    stopTimer,\n    sentEvent,\n  }: ExtendedActionsParams<E, Pc, Tc>) => {\n    this.#performSendToAction(sentEvent);\n\n    this.#performScheduledAction(scheduled);\n    this.#performPauseActivityAction(pauseActivity);\n    this.#performResumeActivityAction(resumeActivity);\n    this.#performStopActivityAction(stopActivity);\n    this.#performPauseTimerAction(pauseTimer);\n    this.#performResumeTimerAction(resumeTimer);\n    this.#performStopTimerAction(stopTimer);\n\n    // ForceSendAction returns the result to make further actions\n    const result =\n      this.#performForceSendAction(forceSend) ??\n      this.#performResendAction(resend);\n\n    return result;\n  };\n\n  #executeAction: PerformAction_F<E, P, Pc, Tc> = action => {\n    this.#makeBusy();\n\n    const { pContext, context, ...extendeds } =\n      this.#performAction(action);\n\n    this.#mergeContexts({ pContext, context });\n\n    this.#performsExtendedActions(extendeds);\n  };\n\n  /**\n   * Throws if the number of self transitions exceeds {@linkcode DEFAULT_MAX_SELF_TRANSITIONS}.\n   */\n  #throwMaxCounter() {\n    const error = `Too much self transitions, exceeded ${DEFAULT_MAX_SELF_TRANSITIONS} transitions`;\n    if (IS_TEST) {\n      this._addError(error);\n      this.#throwing();\n      this.stop();\n      /* v8 ignore next 1 */\n    } else throw error;\n  }\n\n  // get #contexts() {\n  //   return castings.commons<ActionResult<Pc, Tc>>({\n  //     pContext: cloneDeep(this.#pContext),\n  //     context: structuredClone(this.#context),\n  //   });\n  // }\n\n  #performActions = (...actions: ActionConfig[]) => {\n    actions\n      .map(this.toActionFn)\n      .filter(f => f !== undefined)\n      .forEach(this.#executeAction);\n  };\n\n  #performPredicate: PerformPredicate_F<E, P, Pc, Tc> = predicate => {\n    this._iterate();\n    return predicate(this.#cloneState);\n  };\n\n  #executePredicate: PerformPredicate_F<E, P, Pc, Tc> = predicate => {\n    this.#makeBusy();\n    const out = this.#performPredicate(predicate);\n\n    this.#makeWork();\n\n    return out;\n  };\n\n  #performPredicates = (...guards: GuardConfig[]) => {\n    if (guards.length < 1) return true;\n    return guards\n      .map(this.toPredicateFn)\n      .filter(isDefined)\n      .map(this.#executePredicate)\n      .every(b => b);\n  };\n\n  #performDelay: PerformDelay_F<E, P, Pc, Tc> = delay => {\n    this._iterate();\n    return delay(this.#cloneState);\n  };\n\n  #executeDelay: PerformDelay_F<E, P, Pc, Tc> = delay => {\n    this.#makeBusy();\n    const out = this.#performDelay(delay);\n    this.#startStatus();\n    return out;\n  };\n\n  #flushMapSubscribers = () => {\n    this.#subscribers.forEach(f => {\n      const callback = () => f.fn(this.#previousState, this.#state);\n      this.#schedule(callback);\n    });\n  };\n\n  #mergeContexts = (result?: ActionResult<Pc, Tc>) => {\n    this.#pContext = merge(this.#pContext, result?.pContext);\n    const context = merge(this.#context, result?.context);\n    this.#context = context;\n    this.#performStates({ context });\n\n    this.#flush();\n  };\n\n  #executeActivities: ExecuteActivities_F = (from, _activities) => {\n    const entries = Object.entries(_activities);\n    const outs: string[] = [];\n\n    for (const [_delay, _activity] of entries) {\n      const id = `${from}::${_delay}`;\n      const _interval = this._cachedIntervals.find(f => f.id === id);\n\n      if (_interval) {\n        outs.push(id);\n        continue;\n      }\n\n      const delayF = this.toDelayFn(_delay);\n      const check0 = !isDefined(delayF);\n      if (check0) return [];\n      const interval = this.#executeDelay(delayF);\n\n      const check11 = interval < DEFAULT_MIN_ACTIVITY_TIME;\n      if (check11) {\n        this._addWarning(`Delay (${_delay}) is too short`);\n        return [];\n      }\n\n      const check12 = interval > DEFAULT_MAX_TIME_PROMISE;\n      if (check12) {\n        this._addWarning(`Delay (${_delay}) is too long`);\n        return [];\n      }\n\n      const activities = toArray.typed(_activity);\n\n      const callback = () => {\n        const cb = () => {\n          for (const activity of activities) {\n            const check2 = typeof activity === 'string';\n            const check3 = isDescriber(activity);\n            const check4 = check2 || check3;\n\n            if (check4) {\n              this.#performActions(activity);\n              continue;\n            }\n\n            const check5 = this.#performPredicates(\n              ...toArray.typed(activity.guards),\n            );\n            if (check5) {\n              const actions = toArray.typed(activity.actions);\n              this.#performActions(...actions);\n            }\n          }\n        };\n        this.#schedule(cb);\n      };\n      const promise = this.createInterval({\n        callback,\n        interval,\n        id,\n      });\n\n      this._cachedIntervals.push(promise);\n      outs.push(id);\n    }\n\n    return outs;\n  };\n\n  #exact: boolean;\n\n  protected createInterval: CreateInterval2_F = ({\n    callback,\n    id,\n    interval,\n  }) => {\n    const exact = this.#exact;\n    const out = createInterval({\n      callback,\n      id,\n      interval,\n      exact,\n    });\n\n    return out;\n  };\n\n  /**\n   * Collection of all currents {@linkcode Interval2} intervals, related to current {@linkcode ActivityConfig}s of this {@linkcode Interpreter} service.\n   */\n  protected _cachedIntervals: Interval2[] = [];\n\n  #performTransition: PerformTransition_F = transition => {\n    const check = typeof transition == 'string';\n    if (check) {\n      const { diffEntries, diffExits } = this.#diffNext(transition);\n      this.#performActions(...toArray.typed(diffExits));\n      this.#performActions(...toArray.typed(diffEntries));\n      return transition;\n    }\n    const { guards, actions, target } = transition;\n    const { diffEntries, diffExits } = this.#diffNext(target);\n\n    const response = this.#performPredicates(\n      ...toArray<GuardConfig>(guards),\n    );\n\n    if (response) {\n      this.#performActions(...toArray<ActionConfig>(diffExits));\n      this.#performActions(...toArray<ActionConfig>(actions));\n      this.#performActions(...toArray<ActionConfig>(diffEntries));\n      return target ?? false;\n    }\n    return false;\n  };\n\n  #performTransitions: PerformTransitions_F = (...transitions) => {\n    // let transition: ReturnType<PerformTransition_F<Pc, Tc>> = false;\n    for (const _transition of transitions) {\n      const transition = this.#performTransition(_transition);\n      const check1 = typeof transition === 'string';\n      if (check1) return transition;\n    }\n    return false;\n  };\n\n  #performPromiseSrc: PerformPromise_F<E, P, Pc, Tc> = promise => {\n    this._iterate();\n    return promise(this.#cloneState);\n  };\n\n  #performFinally = (_finally?: PromiseeConfig['finally']) => {\n    const check1 = _finally === undefined;\n    if (check1) return;\n\n    const finals = toArray.typed(_finally);\n\n    for (const final of finals) {\n      const check2 = typeof final === 'string';\n      const check3 = isDescriber(final);\n\n      const check4 = check2 || check3;\n      if (check4) {\n        this.#performActions(final);\n        continue;\n      }\n\n      const response = this.#performPredicates(\n        ...toArray.typed(final.guards),\n      );\n      if (response) {\n        this.#performActions(...toArray.typed(final.actions));\n      }\n    }\n    return;\n  };\n\n  get #sending() {\n    return this.#status === 'sending';\n  }\n\n  #performPromisee: PerformPromisee_F<E, P> = (from, ...promisees) => {\n    type PR = PromiseeResult<E, P>;\n\n    const promises: TimeoutPromise<PR | undefined>[] = [];\n\n    promisees.forEach(\n      ({ src, then, catch: _catch, finally: _finally, max: maxS }) => {\n        const promiseF = this.toPromiseSrcFn(src);\n        if (!promiseF) return;\n\n        const handlePromise = (type: 'then' | 'catch', payload: any) => {\n          const out = () => {\n            const event = {\n              type: `${src}::${type}`,\n              payload,\n            };\n            this.#changeEvent(castings.commons.any(event));\n\n            const transitions = toArray.typed(\n              type === 'then' ? then : _catch,\n            );\n\n            const target = this.#performTransitions(\n              ...(transitions as any),\n            );\n\n            this.#performFinally(_finally);\n\n            return { event: this.#event, target };\n          };\n\n          if (this.#cannotPerform(from)) return;\n          return out();\n        };\n\n        const _promise = () =>\n          this.#performPromiseSrc(promiseF)\n            .then(partialCall(handlePromise, 'then'))\n            .catch(partialCall(handlePromise, 'catch'));\n\n        const MAX_POMS = [DEFAULT_MAX_TIME_PROMISE];\n\n        const check3 = isDefined(maxS);\n        if (check3) {\n          const delayF = this.toDelayFn(maxS);\n          const check4 = !isDefined(delayF);\n          if (check4) return this.#throwing();\n          const max = this.#performDelay(delayF);\n          MAX_POMS.push(max);\n        }\n\n        const promise = withTimeout.safe(_promise, from, ...MAX_POMS);\n        promises.push(promise);\n      },\n    );\n\n    const check5 = promises.length < 1;\n\n    if (check5) return;\n\n    const promise = anyPromises(from, ...promises);\n    return promise;\n  };\n\n  /**\n   * Checks if sent events cannot be performed.\n   * @param from - the config value from which the events are sent.\n   * @returns true if the events cannot be performed, false otherwise.\n   */\n  #cannotPerform = (from: string) => {\n    const check = this.#sending || !this.#isInsideValue(from);\n    return check;\n  };\n\n  #performAfter: PerformAfter_F = (from, after) => {\n    const entries = Object.entries(after);\n    const promises: TimeoutPromise<string | false>[] = [];\n\n    entries.forEach(([_delay, transition]) => {\n      const delayF = this.toDelayFn(_delay);\n      const check0 = !isDefined(delayF);\n\n      if (check0) return;\n\n      const delay = this.#executeDelay(delayF);\n\n      const check1 = delay > DEFAULT_MAX_TIME_PROMISE;\n      if (check1) {\n        this._addWarning(`Delay ${_delay} is too long`);\n        return;\n      }\n\n      const transitions = toArray.typed(transition);\n\n      const _promise = async () => {\n        await sleep(delay);\n\n        const func = () =>\n          this.#performTransitions(...(transitions as any));\n\n        if (this.#cannotPerform(from)) return false;\n\n        const out = func();\n\n        if (out === false) {\n          const message = `No transitions reached from \"${from}\" by delay \"${_delay}\" !`;\n\n          throw message;\n        }\n        return out;\n      };\n\n      const promise = withTimeout(\n        _promise,\n        from,\n        DEFAULT_MAX_TIME_PROMISE,\n      );\n\n      promises.push(promise);\n    });\n\n    const check5 = promises.length < 1;\n    if (check5) return;\n\n    const promise = anyPromises(from, ...promises);\n    return promise;\n  };\n\n  #performAlways: PerformAlway_F = alway => {\n    const always = toArray<TransitionConfig>(alway);\n    return this.#performTransitions(...always);\n  };\n\n  get #collectedPromisees() {\n    const entriesFlat = Object.entries(this.#flat);\n    const entries: [from: string, ...promisees: PromiseeConfig[]][] = [];\n\n    entriesFlat.forEach(([from, node]) => {\n      const promisees = toArray.typed(node.promises);\n      if (node.promises) {\n        entries.push([from, ...promisees]);\n      }\n    });\n\n    return entries;\n  }\n\n  get #collectedActivities() {\n    const entriesFlat = Object.entries(this.#flat);\n\n    const entries: [from: string, activities: ActivityConfig][] = [];\n\n    entriesFlat.forEach(([from, { activities }]) => {\n      if (activities) {\n        entries.push([from, activities]);\n      }\n    });\n\n    return entries;\n  }\n\n  get #collectedAfters() {\n    const entriesFlat = Object.entries(this.#flat);\n    const entries: [from: string, after: DelayedTransitions][] = [];\n\n    entriesFlat.forEach(([from, node]) => {\n      const after = node.after;\n      if (after) {\n        entries.push([from, after]);\n      }\n    });\n\n    return entries;\n  }\n\n  get #collectedAlways() {\n    const entriesFlat = Object.entries(this.#flat);\n    const entries: [from: string, always: AlwaysConfig][] = [];\n\n    entriesFlat.forEach(([from, node]) => {\n      const always = node.always;\n      if (always) {\n        entries.push([from, always]);\n      }\n    });\n\n    return entries;\n  }\n\n  get #currentActivities() {\n    const collected = this.#collectedActivities;\n    const check = collected.length < 1;\n    if (check) return;\n\n    const ids: string[] = [];\n    for (const args of collected) {\n      ids.push(...this.#executeActivities(...args));\n    }\n\n    return this._cachedIntervals.filter(({ id }) => ids.includes(id));\n  }\n\n  #performActivities = () => {\n    return this.#currentActivities?.forEach(this.#start);\n  };\n\n  #performChildMachines = () => {\n    this.#childrenMachines.forEach(({ id, ...child }) => {\n      this.#reduceChild(castings.commons.any(child), id);\n    });\n\n    this.#childrenServices.forEach(child => {\n      child.start();\n    });\n  };\n\n  /**\n   * Get all brut self transitions of the current {@linkcode NodeConfigWithInitials} config state of this {@linkcode Interpreter} service.\n   */\n  get #collectedSelfTransitions0() {\n    const entries = new Map<string, Collected0<E, P>>();\n\n    this.#collectedAlways.forEach(([from, always]) => {\n      entries.set(from, { always: () => this.#performAlways(always) });\n    });\n\n    this.#collectedAfters.forEach(([from, after]) => {\n      const inner = entries.get(from);\n      if (inner) {\n        inner.after = this.#performAfter(from, after);\n      } else entries.set(from, { after: this.#performAfter(from, after) });\n    });\n\n    this.#collectedPromisees.forEach(([from, ...promisees]) => {\n      const inner = entries.get(from);\n      if (inner) {\n        inner.promisee = this.#performPromisee(from, ...promisees);\n      } else {\n        entries.set(from, {\n          promisee: this.#performPromisee(from, ...promisees),\n        });\n      }\n    });\n\n    return entries;\n  }\n\n  /**\n   * Changes the current {@linkcode ToEvents} event of this {@linkcode Interpreter} service.\n   *\n   * @param event - the {@linkcode ToEvents} event to change the current {@linkcode Interpreter} service state.\n   */\n  #changeEvent = (event: ToEventsR<E, P>) => {\n    this.#performStates({ event });\n    this.#event = event;\n  };\n\n  get #collectedSelfTransitions() {\n    const entries = Array.from(this.#collectedSelfTransitions0);\n    const out = entries.map(([from, { after, always, promisee }]) => {\n      const promise = async () => {\n        if (always) {\n          const target = always();\n          if (target !== false) {\n            const cb = () => {\n              this.#performConfig(target);\n            };\n            return this.#schedule(cb);\n          }\n        }\n\n        const promises: TimeoutPromise<void>[] = [];\n        if (after) {\n          const _after = async () => {\n            await after()\n              .then(transition => {\n                if (transition !== false) {\n                  const cb = () => {\n                    this.#performConfig(transition);\n                  };\n                  this.#schedule(cb);\n                }\n              })\n              .catch(this._addWarning);\n          };\n          promises.push(withTimeout(_after, 'after'));\n        }\n\n        if (promisee) {\n          const _promisee = async () => {\n            return promisee().then(transition => {\n              const target = transition?.target;\n              if (target !== false) {\n                const cb = () => this.#performConfig(target);\n                this.#schedule(cb);\n              }\n            });\n          };\n          promises.push(withTimeout(_promisee, 'promisee'));\n        }\n\n        const check1 = promises.length < 1;\n        if (check1) return;\n\n        await anyPromises(from, ...promises)();\n      };\n\n      return promise;\n    });\n\n    return out;\n  }\n\n  #performSelfTransitions = async () => {\n    this.#makeBusy();\n\n    const state1 = structuredClone(this.#state);\n    await Promise.all(this.#collectedSelfTransitions.map(f => f()));\n    const state2 = structuredClone(this.#state);\n    const check = !equal(state1, state2);\n    if (check) {\n      this.#flush();\n    }\n\n    this.#makeWork();\n  };\n\n  #startInitialEntries = () => {\n    const actions = getEntries(this.#initialConfig);\n    if (actions.length < 1) return;\n    const cb = () => this.#performActions(...actions);\n    this.#schedule(cb);\n  };\n\n  /**\n   * @deprecated\n   * A mapper function that returns a function to call a method on a value.\n   * @param key - the key of the method to be called on the value.\n   * @returns a function that calls the method on the value.\n   *\n   * @see {@linkcode AllowedNames} for more information about allowed names.\n   * @see {@linkcode Fn} for more information about function types.\n   */\n  #mapperFn = <T>(key: types.AllowedNames<T, types.Fn>) => {\n    return (value: T) => {\n      const fn = (value as any)[key];\n      this.#schedule(fn);\n    };\n  };\n\n  #pause = this.#mapperFn('pause');\n\n  #open = this.#mapperFn('open');\n  #start = this.#mapperFn('start');\n\n  #close = this.#mapperFn('close');\n\n  #resume = this.#mapperFn('resume');\n\n  #unsubscribe = this.#mapperFn('unsubscribe');\n\n  #stop = this.#mapperFn('stop');\n  #dispose = this.#mapperFn('dispose');\n\n  pause = () => {\n    this.#pauseAllActivities();\n    this.#makeBusy();\n    this.#subscribers.forEach(this.#close);\n    this.#childrenServices.forEach(this.#pause);\n    this.#timeoutActions.forEach(this.#pause);\n    this.#setStatus('paused');\n  };\n\n  resume = () => {\n    if (this.#status === 'paused') {\n      this.#performActivities();\n      this.#makeBusy();\n      this.#subscribers.forEach(this.#open);\n      this.#timeoutActions.forEach(this.#resume);\n      this.#childrenServices.forEach(this.#resume);\n      this.#makeWork();\n    }\n  };\n\n  stop = () => {\n    this.pause();\n    this.#makeBusy();\n    this.#subscribers.forEach(this.#unsubscribe);\n    this.#childrenServices.forEach(this.#stop);\n    this._cachedIntervals.forEach(this.#dispose);\n    this.#timeoutActions.forEach(this.#stop);\n    this.#scheduler.stop();\n    this.#setStatus('stopped');\n  };\n\n  #makeBusy = (): WorkingStatus => {\n    return this.#setStatus('busy');\n  };\n\n  #setStatus = (status: WorkingStatus) => {\n    this.#performStates({ status });\n    return (this.#status = status);\n  };\n\n  #startingStatus = (): WorkingStatus => {\n    return this.#setStatus('starting');\n  };\n\n  /**\n   * @deprecated\n   * Used internally\n   */\n  _providePrivateContext = (pContext: Pc) => {\n    this.#initialPpc = this.#pContext = pContext;\n    this.#makeBusy();\n\n    this.#machine.addPrivateContext(this.#initialPpc);\n\n    this.#startingStatus();\n    return this.#machine;\n  };\n\n  /**\n   * @deprecated\n   * Used internally\n   *\n   * Alias of {@linkcode _providePrivateContext}\n   */\n  _ppC = this._providePrivateContext;\n\n  /**\n   * @deprecated\n   * Used internally\n   */\n  _provideContext = (context: Tc) => {\n    this.#initialContext = this.#context = context;\n    this.#performStates({ context });\n    this.#makeBusy();\n\n    this.#machine.addContext(this.#initialContext);\n\n    this.#startingStatus();\n    return this.#machine;\n  };\n\n  /**\n   * Add options to the inner {@linkcode Machine} of this {@linkcode Interpreter} service.\n   */\n  get addOptions() {\n    return this.#machine.addOptions;\n  }\n\n  #subscribers = new Set<SubscriberClass<E, P, Tc>>();\n\n  get state() {\n    return Object.freeze(cloneDeep(this.#state));\n  }\n\n  subscribe: AddSubscriber_F<E, P, Tc> = (_subscriber, options) => {\n    const eventsMap = this.#machine.eventsMap;\n    const promiseesMap = this.#machine.promiseesMap;\n    const find = Array.from(this.#subscribers).find(\n      f => f.id === options?.id,\n    );\n    if (find) return find;\n\n    const subcriber = createSubscriber(\n      eventsMap,\n      promiseesMap,\n      _subscriber,\n      options,\n    );\n    this.#subscribers.add(subcriber);\n    return subcriber;\n  };\n\n  #errorsCollector = new Set<string>();\n  #warningsCollector = new Set<string>();\n\n  /**\n   * @deprecated\n   * Just use for testing\n   * @remarks returns nothing in prod\n   */\n  get _errorsCollector() {\n    if (IS_TEST) {\n      return this.#errorsCollector;\n      /* v8 ignore next 3 */\n    }\n    console.error('errorsCollector is not available in production');\n    return;\n  }\n\n  /**\n   * @deprecated\n   * Just use for testing\n   * @remarks returns nothing in prod\n   */\n  get _warningsCollector() {\n    if (IS_TEST) {\n      return this.#warningsCollector;\n      /* v8 ignore next 3 */\n    }\n    console.error('warningsCollector is not available in production');\n    return;\n  }\n\n  protected _addError = (...errors: string[]) => {\n    errors.forEach(error => this.#errorsCollector.add(error));\n  };\n\n  protected _addWarning = (...warnings: string[]) => {\n    warnings.forEach(warning => this.#warningsCollector.add(warning));\n  };\n\n  // #region Next\n\n  #extractTransitions = (event: ToEventsR<E, P>) => {\n    type FlatArray = [from: string, transitions: TransitionConfig[]][];\n    const entriesFlat = Object.entries(this.#flat);\n    const flat: FlatArray = [];\n    const flat2: FlatArray = [];\n\n    const type = event.type;\n    entriesFlat.forEach(([from, node]) => {\n      const on = node.on;\n      const trs = on?.[type];\n      if (trs) {\n        const transitions = toArray.typed(trs);\n        flat.push([from, transitions as any]);\n      }\n    });\n\n    flat.forEach(([from, transitions], _, all) => {\n      const canTake = all.every(\n        ([from2]) => !from2.startsWith(`${from}${DEFAULT_DELIMITER}`),\n      );\n      if (canTake) flat2.push([from, transitions]);\n    });\n\n    flat2.sort((a, b) => {\n      const from1 = a[0];\n      const from2 = b[0];\n\n      const split1 = from1\n        .split(DEFAULT_DELIMITER)\n        .filter(val => !isStringEmpty(val)).length;\n\n      const split2 = from2\n        .split(DEFAULT_DELIMITER)\n        .filter(val => !isStringEmpty(val)).length;\n\n      const splitsAreDifferents = split1 !== split2;\n      if (splitsAreDifferents) return split2 - split1;\n      return from2.localeCompare(from1);\n    });\n\n    return flat2;\n  };\n\n  protected _send: _Send_F<E, P> = event => {\n    this.#changeEvent(event);\n    this.#setStatus('sending');\n    let sv = this.#value;\n\n    const flat2 = this.#extractTransitions(event);\n    // #endregion\n\n    flat2.forEach(([from, transitions]) => {\n      const cannotContinue = !this.#isInsideValue2(sv, from);\n      if (cannotContinue) return;\n\n      const target = this.#performTransitions(\n        ...toArray.typed(transitions),\n      );\n\n      const diffTarget = target === false ? undefined : target;\n      sv = nextSV(sv, diffTarget);\n    });\n\n    const next = switchV({\n      condition: equal(this.#value, sv),\n      truthy: undefined,\n      falsy: initialConfig(this.#machine.valueToConfig(sv)),\n    });\n\n    return next;\n  };\n\n  get #possibleEvents() {\n    return possibleEvents(this.#flat);\n  }\n\n  #cannotPerformEvents = (_event: EventArg<E>) => {\n    const type = eventToType(_event);\n    const check = !this.#possibleEvents.includes(type);\n    return check;\n  };\n\n  /**\n   * Creates a sender function for the given event type.\n   * @param type - the {@linkcode EventArgT} type of the event to send.\n   * @returns a function with the payload as Parameter that sends the event with the given type and payload.\n   *\n   * @see {@linkcode send} for sending events directly.\n   */\n  sender = <T extends EventArgT<E>>(type: T) => {\n    type Arg = Extract<ToEventsR<E, P>, { type: T }>['payload'];\n    type Payload = object extends Arg ? [] : [Arg];\n\n    return (...data: Payload) => {\n      const payload = data.length === 1 ? data[0] : {};\n      const event = { type, payload } as EventArg<E>;\n      return this.send(event);\n    };\n  };\n\n  /**\n   * Sends an event without cheching to the current {@linkcode Interpreter} service.\n   *\n   * @param _event - the {@linkcode EventArg} event to send.\n   *\n   */\n  #send = (_event: EventArg<E>) => {\n    const event = transformEventArg(_event);\n    const next = this._send(event);\n\n    if (isDefined(next)) {\n      this.#config = next;\n      this.#performConfig(true);\n      this.#makeWork();\n      this._next();\n    } else this.#makeWork();\n  };\n\n  /**\n   * Sends an event to the current {@linkcode Interpreter} service.\n   *\n   * @param _event - the {@linkcode EventArg} event to send.\n   *\n   * @remarks\n   * If the event cannot be performed, it will not be sent.\n   * If the event is sent, it will be processed and the state will be updated.\n   */\n  send = (_event: EventArg<E>) => {\n    const check = this.#cannotPerformEvents(_event);\n    if (check) return;\n\n    this.#send(_event);\n  };\n\n  /**\n   * Proposes the next state value based on the current state value and the target.\n   * @param target - the target state to propose the next state value.\n   * @returns the next {@linkcode StateValue} based on the current state value and the target.\n   *\n   * @remarks\n   * This method calculates the next state value based on the current state value and the target.\n   * It does not change the current state value, but returns the proposed next state value.\n   * It is used internally to calculate the next state value before sending an event.\n   */\n  #proposedNextSV = (target: string) => nextSV(this.#value, target);\n\n  /**\n   * Proposes the next configuration based on the current state value and the target.\n   * @param target - the target state to propose the next configuration.\n   * @returns the proposed next {@linkcode NodeConfigWithInitials} based on the current state value and the target.\n   *\n   * @remarks\n   * Only proposes next config, does not change the current config.\n   *\n   * //\n   *\n   * @see {@linkcode Machine.valueToConfig} for more details.\n   *\n   * //\n   */\n  protected proposedNextConfig = (target: string) => {\n    const nextValue = this.#proposedNextSV(target);\n    const out = this.#machine.valueToConfig(nextValue);\n\n    return out;\n  };\n\n  /**\n   * Calculates the difference between the current and next configuration.\n   * @param target - the target state to calculate the difference.\n   * @returns an {@linkcode DiffNext} object containing the proposed next state value, entry actions, and exit actions.\n   *\n   * @remarks\n   * This method is used to calculate the entry and exit actions when transitioning to a new state.\n   * It compares the current configuration with the proposed next configuration and returns the differences.\n   */\n  #diffNext = (target?: string): DiffNext => {\n    if (!target) {\n      return { sv: this.#value, diffEntries: [], diffExits: [] };\n    }\n\n    const next = castings.commons.unknown<NodeConfig>(\n      initialConfig(\n        castings.commons.unknown(this.proposedNextConfig(target)),\n      ),\n    );\n    const flatNext = flatMap(next);\n\n    const entriesCurrent = Object.entries(this.#flat);\n    const keysNext = Object.keys(flatNext);\n\n    const keys = entriesCurrent.map(([key]) => key);\n    const diffEntries: ActionConfig[] = [];\n    const diffExits: ActionConfig[] = [];\n\n    // #region Entry actions\n\n    // These actions are from next config states that are not inside the previous\n    keysNext.forEach(key => {\n      const check2 = !keys.includes(key);\n\n      if (check2) {\n        const out2 = (flatNext as any)[key];\n        const _entries = getEntries(out2);\n        diffEntries.push(..._entries);\n      }\n    });\n    // #endregion\n\n    // #region Exit actions\n\n    // These actions are from previous config states that are not inside the next\n    entriesCurrent.forEach(([key, node]) => {\n      const check2 = !keysNext.includes(key);\n\n      if (check2) {\n        const _exits = getExits(node);\n        diffExits.push(..._exits);\n      }\n    });\n    // #endregion\n    const sv = this.#proposedNextSV(target);\n    return { sv, diffEntries, diffExits };\n  };\n\n  /**\n   * Checks if the given value is inside the current state value.\n   * @param value - the state value to check if it is inside the current state value.\n   * @returns true if the value is inside the current state value, false otherwise.\n   */\n  #isInsideValue = (value: string) => {\n    return this.#isInsideValue2(this.#value, value);\n  };\n\n  #isInsideValue2 = (sv: StateValue, value: string) => {\n    const values = decomposeSV(sv);\n    const entry = value.substring(1);\n    const state = replaceAll({\n      entry,\n      match: DEFAULT_DELIMITER,\n      replacement: '.',\n    });\n\n    return values.includes(state);\n  };\n\n  /**\n   * Changes the current {@linkcode Interpreter} service status to 'working'.\n   * @returns the current {@linkcode WorkingStatus} of this {@linkcode Interpreter} service.\n   */\n  #makeWork = () => this.#setStatus('working');\n\n  // #endregion\n\n  /**\n   * Returns the output value with a warning if it is not defined.\n   * @param out of type [T], the output value to check if it is defined.\n   * @param messages - the messages to add to the warnings collector if the output is not defined. it's a parram array\n   */\n  #returnWithWarning = <T = any>(\n    out: T | undefined,\n    ...messages: string[]\n  ) => {\n    const check = isDefined(out);\n    if (check) return out;\n\n    this._addWarning(...messages);\n    return;\n  };\n\n  toActionFn = (action: ActionConfig) => {\n    const events = this.#machine.eventsMap;\n    const promisees = this.#machine.promiseesMap;\n    const actions = this.#machine.actions;\n\n    return this.#returnWithWarning(\n      toAction<E, P, Pc, Tc>(events, promisees, action, actions),\n      `Action (${reduceAction(action)}) is not defined`,\n    );\n  };\n\n  toPredicateFn = (guard: GuardConfig) => {\n    const events = this.#machine.eventsMap;\n    const promisees = this.#machine.promiseesMap;\n    const predicates = this.#machine.predicates;\n\n    const { predicate, errors } = toPredicate<E, P, Pc, Tc>(\n      events,\n      promisees,\n      guard,\n      predicates,\n    );\n\n    return this.#returnWithWarning(predicate, ...errors);\n  };\n\n  toPromiseSrcFn = (src: string) => {\n    const events = this.#machine.eventsMap;\n    const promisees = this.#machine.promiseesMap;\n    const promises = this.#machine.promises;\n\n    return this.#returnWithWarning(\n      toPromiseSrc<E, P, Pc, Tc>(events, promisees, src, promises),\n      `Promise (${src}) is not defined`,\n    );\n  };\n\n  toDelayFn = (delay: string) => {\n    const events = this.#machine.eventsMap;\n    const promisees = this.#machine.promiseesMap;\n    const delays = this.#machine.delays;\n\n    return this.#returnWithWarning(\n      toDelay<E, P, Pc, Tc>(events, promisees, delay, delays),\n      `Delay (${delay}) is not defined`,\n    );\n  };\n\n  toMachine = (machine: MachineConfig) => {\n    const machines = this.#machine.machines;\n\n    return this.#returnWithWarning(\n      toMachine<E, P, Tc>(machine, machines),\n      `Machine (${reduceAction(machine)}) is not defined`,\n    );\n  };\n\n  protected interpretChild = interpret;\n\n  //TODO: Add a subscribeTo Method to subscribe to a already started service\n  /**\n   * Subscribes a child machine to the current machine.\n   *\n   * @param id - The unique identifier for the child machine.\n   * @param {@linkcode ChildS2} - The child machine configuration to subscribe.\n   * @returns a {@linkcode SubscriberClass} result of the child machine subscription.\n   *\n   */\n  subscribeMachine = <T extends AnyMachine = AnyMachine>(\n    id: string,\n    { initials: _initials, ...rest }: ChildS2<E, P, Pc, Tc, T>,\n  ) => {\n    const reduced = reduceFnMap(\n      this.#machine.eventsMap,\n      this.#machine.promiseesMap,\n      _initials,\n    );\n\n    const initials = reduced(this.#cloneState);\n\n    const child = castings.commons<ChildS<E, P, Pc, T>>({\n      initials,\n      ...rest,\n    });\n\n    return this.#reduceChild(child, id);\n  };\n\n  /**\n   * Sends an event to a specific child service by its ID.\n   *\n   * @param to - The ID of the child service to which the event will be sent.\n   * @param : the {@linkcode EventObject} event to send to the child service.\n   *\n   * @see {@linkcode send} for sending events to the current service.\n   * @see {@linkcode castings} for type casting.\n   */\n  #sendTo = <T extends EventObject>(to: string, event: T) => {\n    const service = this.#childrenServices.find(({ id }) => id === to);\n\n    if (service) service.send(castings.commons(event));\n  };\n\n  /**\n   * Performs some computations to reduce a child machine configuration to a service and subscribes to it.\n   *\n   * @param : {@linkcode ChildS} - The child machine configuration to reduce.\n   * @param id - The unique identifier for the child service.\n   * @returns a {@linkcode SubscriberClass} result of the child service subscription.\n   */\n  #reduceChild = <T extends AnyMachine = AnyMachine>(\n    { subscribers, machine, initials }: ChildS<E, P, Pc, T>,\n    id: string,\n  ) => {\n    let service = castings.commons<InterpreterFrom<T>>(\n      this.#childrenServices.find(f => f.id === id),\n    );\n\n    if (!service) {\n      service = this.interpretChild(machine, initials);\n      service.id = id;\n      this.#childrenServices.push(castings.commons(service));\n    }\n\n    const subscriber = service.subscribe(\n      ({ event }) => {\n        const type = eventToType(event);\n        const _subscribers = toArray.typed(subscribers);\n\n        _subscribers.forEach(({ contexts, events }) => {\n          const type2 = eventToType(service.#event);\n\n          const checkEvents = reduceEvents(\n            castings.commons.any(events),\n            type,\n            type2,\n          );\n\n          const checkContexts = !isDefined(contexts);\n          if (checkEvents) {\n            if (checkContexts) {\n              const pContext = castings.commons.any(service.#context);\n              const callback = () => this.#mergeContexts({ pContext });\n              this.#schedule(callback);\n            } else {\n              type _Contexts = types.SingleOrArray<\n                string | Record<string, string | string[]>\n              >;\n              const _contexts =\n                castings.commons.unknown<_Contexts>(contexts);\n              const paths = toArray.typed(_contexts);\n\n              paths.forEach(path => {\n                if (typeof path === 'string') {\n                  const callback = () =>\n                    assignByKey(this.#pContext, path, service.#context);\n                  this.#schedule(callback);\n                } else {\n                  const entries = Object.entries(path).map(\n                    ([key, value]) => {\n                      const paths = toArray.typed(value);\n                      return castings.arrays.tupleOf(key, paths);\n                    },\n                  );\n\n                  entries.forEach(([pathChild, paths]) => {\n                    paths.forEach(path => {\n                      const pContext = mergeByKey(this.#pContext)(\n                        path,\n                        getByKey(service.#context, pathChild),\n                      );\n\n                      const callback = () =>\n                        this.#mergeContexts({ pContext });\n                      this.#schedule(callback);\n                    });\n                  });\n                }\n              });\n            }\n          }\n        });\n      },\n      { id },\n    );\n\n    return subscriber;\n  };\n\n  // #region Disposable\n\n  dispose = () => {\n    this.stop();\n    this.#childrenServices.forEach(this.#dispose);\n    this.#timeoutActions.forEach(this.#dispose);\n  };\n\n  [Symbol.dispose] = this.dispose;\n\n  [Symbol.asyncDispose] = () => {\n    const out = asyncfy(this[Symbol.dispose]);\n    return out();\n  };\n  // #endregion\n}\n\nexport const TIME_TO_RINIT_SELF_COUNTER = DEFAULT_MIN_ACTIVITY_TIME * 2;\n\nexport type AnyInterpreter2 = Interpreter<any, any, any, any, any, any>;\n\n/**\n * Retrieves the {@linkcode Interpreter} service from the given {@linkcode AnyMachine} machine.\n *\n * @template : type {@linkcode AnyMachine} [M] - The type of the machine from which to retrieve the interpreter.\n *\n * @see {@linkcode ConfigFrom}\n * @see {@linkcode PrivateContextFrom}\n * @see {@linkcode ContextFrom}\n * @see {@linkcode EventsMapFrom}\n * @see {@linkcode PromiseesMapFrom}\n * @see {@linkcode MachineOptionsFrom}\n */\nexport type InterpreterFrom<M extends AnyMachine> = Interpreter<\n  ConfigFrom<M>,\n  PrivateContextFrom<M>,\n  ContextFrom<M>,\n  EventsMapFrom<M>,\n  PromiseesMapFrom<M>,\n  MachineOptionsFrom<M>\n>;\n\nexport const _interpret: any = (machine: any, args: any) => {\n  const { context, pContext, mode, exact } = args ?? {};\n  const out = new (Interpreter as any)(machine, mode, exact);\n\n  out._ppC(pContext ?? {});\n  out._provideContext(context ?? {});\n\n  return out as any;\n};\n\n/**\n * Creates an {@linkcode Interpreter} service from the given {@linkcode MachineConfig} machine.\n *\n * @param machine - The {@linkcode MachineConfig} machine to create the interpreter from.\n * @param options - The options for the interpreter, including context, private context, mode, and exact.\n * @returns an {@linkcode Interpreter} service.\n *\n * @see {@linkcode MachineConfig}\n */\nexport const interpret: Interpreter_F = _interpret;\n"],"names":[],"mappings":"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"}