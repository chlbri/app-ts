{"version":3,"file":"scheduler.cjs","sources":["../../src/interpreters/scheduler.ts"],"sourcesContent":["import type { types } from '@bemedev/types';\n\n/**\n * A callback function type that takes no arguments and returns void.\n *\n * @see {@linkcode Fn} for more details.\n */\ntype Cb = types.Fn<[], void>;\n\n/**\n * Represents the status of the scheduler.\n *\n * @enum\n * - 'idle': The scheduler is not initialized or processing any tasks.\n * - 'initialized': The scheduler has been initialized and is ready to process tasks.\n * - 'processing': The scheduler is currently processing a task.\n * - 'paused': The scheduler is paused and not processing tasks.\n * - 'working': The scheduler is actively working on a task.\n * - 'stopped': The scheduler has been stopped and will not process any more tasks.\n */\ntype Status =\n  | 'idle'\n  | 'initialized'\n  | 'processing'\n  | 'paused'\n  | 'working'\n  | 'stopped';\n\n/**\n * A class that manages a queue of tasks and their execution status.\n */\nexport class Scheduler {\n  #queue: Array<Cb> = [];\n\n  #performeds = 0;\n\n  get performeds() {\n    return this.#performeds;\n  }\n\n  #currentStatus: Status = 'idle';\n\n  /* v8 ignore next 3*/\n  get status() {\n    return this.#currentStatus;\n  }\n\n  initialize = (callback?: Cb) => {\n    const check = this.#currentStatus !== 'idle';\n    if (check) return;\n    this.#currentStatus = 'initialized';\n\n    if (callback) {\n      this.#process(callback);\n    }\n\n    this.#flush();\n  };\n\n  get #processing() {\n    return this.#currentStatus === 'processing';\n  }\n\n  /**\n   * Schedules a callback function for execution.\n   * @param task of type {@linkcode Cb} The callback function to be scheduled for execution.\n   */\n  schedule = (task: Cb) => {\n    const check0 = this.#currentStatus === 'stopped';\n    if (check0) return;\n\n    const check1 =\n      this.#processing ||\n      this.#currentStatus === 'idle' ||\n      this.#currentStatus === 'paused';\n\n    if (check1) {\n      this.#queue.push(task);\n      return;\n    }\n\n    this.#process(task);\n    this.#flush();\n  };\n\n  pause = () => {\n    this.#currentStatus = 'paused';\n  };\n\n  #clear = () => {\n    this.#queue = [];\n  };\n\n  stop = () => {\n    this.pause();\n    this.#currentStatus = 'stopped';\n    this.#clear();\n  };\n\n  #flush = () => {\n    let nextCallback = this.#queue.shift();\n    while (nextCallback) {\n      this.#process(nextCallback);\n      nextCallback = this.#queue.shift();\n    }\n  };\n\n  /**\n   * Immediately processes the callback function, updates the status, and increments the performed count.\n   *\n   * @param callback of type {@linkcode Cb} The callback function to be executed immediately.\n   */\n  processImmediate = (callback: Cb) => {\n    callback();\n    this.#performeds++;\n    this.#currentStatus = 'working';\n  };\n\n  #process = (callback: Cb) => {\n    const check =\n      this.#currentStatus === 'working' ||\n      this.#currentStatus === 'initialized';\n\n    if (check) {\n      this.#currentStatus = 'processing';\n      this.processImmediate(callback);\n    }\n  };\n}\n"],"names":[],"mappings":";;AA4BA;;AAEG;MACU,SAAS,CAAA;IACpB,MAAM,GAAc,EAAE;IAEtB,WAAW,GAAG,CAAC;AAEf,IAAA,IAAI,UAAU,GAAA;QACZ,OAAO,IAAI,CAAC,WAAW;IACzB;IAEA,cAAc,GAAW,MAAM;;AAG/B,IAAA,IAAI,MAAM,GAAA;QACR,OAAO,IAAI,CAAC,cAAc;IAC5B;AAEA,IAAA,UAAU,GAAG,CAAC,QAAa,KAAI;AAC7B,QAAA,MAAM,KAAK,GAAG,IAAI,CAAC,cAAc,KAAK,MAAM;AAC5C,QAAA,IAAI,KAAK;YAAE;AACX,QAAA,IAAI,CAAC,cAAc,GAAG,aAAa;QAEnC,IAAI,QAAQ,EAAE;AACZ,YAAA,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC;QACzB;QAEA,IAAI,CAAC,MAAM,EAAE;AACf,IAAA,CAAC;AAED,IAAA,IAAI,WAAW,GAAA;AACb,QAAA,OAAO,IAAI,CAAC,cAAc,KAAK,YAAY;IAC7C;AAEA;;;AAGG;AACH,IAAA,QAAQ,GAAG,CAAC,IAAQ,KAAI;AACtB,QAAA,MAAM,MAAM,GAAG,IAAI,CAAC,cAAc,KAAK,SAAS;AAChD,QAAA,IAAI,MAAM;YAAE;AAEZ,QAAA,MAAM,MAAM,GACV,IAAI,CAAC,WAAW;YAChB,IAAI,CAAC,cAAc,KAAK,MAAM;AAC9B,YAAA,IAAI,CAAC,cAAc,KAAK,QAAQ;QAElC,IAAI,MAAM,EAAE;AACV,YAAA,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;YACtB;QACF;AAEA,QAAA,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;QACnB,IAAI,CAAC,MAAM,EAAE;AACf,IAAA,CAAC;IAED,KAAK,GAAG,MAAK;AACX,QAAA,IAAI,CAAC,cAAc,GAAG,QAAQ;AAChC,IAAA,CAAC;IAED,MAAM,GAAG,MAAK;AACZ,QAAA,IAAI,CAAC,MAAM,GAAG,EAAE;AAClB,IAAA,CAAC;IAED,IAAI,GAAG,MAAK;QACV,IAAI,CAAC,KAAK,EAAE;AACZ,QAAA,IAAI,CAAC,cAAc,GAAG,SAAS;QAC/B,IAAI,CAAC,MAAM,EAAE;AACf,IAAA,CAAC;IAED,MAAM,GAAG,MAAK;QACZ,IAAI,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE;QACtC,OAAO,YAAY,EAAE;AACnB,YAAA,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC;AAC3B,YAAA,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE;QACpC;AACF,IAAA,CAAC;AAED;;;;AAIG;AACH,IAAA,gBAAgB,GAAG,CAAC,QAAY,KAAI;AAClC,QAAA,QAAQ,EAAE;QACV,IAAI,CAAC,WAAW,EAAE;AAClB,QAAA,IAAI,CAAC,cAAc,GAAG,SAAS;AACjC,IAAA,CAAC;AAED,IAAA,QAAQ,GAAG,CAAC,QAAY,KAAI;AAC1B,QAAA,MAAM,KAAK,GACT,IAAI,CAAC,cAAc,KAAK,SAAS;AACjC,YAAA,IAAI,CAAC,cAAc,KAAK,aAAa;QAEvC,IAAI,KAAK,EAAE;AACT,YAAA,IAAI,CAAC,cAAc,GAAG,YAAY;AAClC,YAAA,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC;QACjC;AACF,IAAA,CAAC;AACF;;;;"}