{"version":3,"file":"create.cjs","sources":["../../../src/machine/functions/create.ts"],"sourcesContent":["import type { EventsMap, PromiseeMap } from '#events';\nimport type {\n  ChildS,\n  Config,\n  ContextFrom,\n  PrivateContextFrom,\n  SubscriberType,\n} from '#machines';\nimport { castings } from '@bemedev/types';\nimport type { KeyU } from '~types';\n\nexport type CreateConfig_F = <const T extends Config>(config: T) => T;\n\n/**\n * Creates a machine configuration.\n * This function takes a configuration object and returns it as is.\n * It is a utility function to ensure that the configuration is of the correct type.\n *\n * @param value - The configuration object of type {@linkcode Config}.\n *\n * @returns The same configuration object of type {@linkcode Config}.\n *\n */\nexport const createConfig: CreateConfig_F = castings.commons.any;\n\nexport type CreateChildS_F = <\n  T extends KeyU<'config' | 'context' | 'pContext'>,\n  E extends EventsMap = EventsMap,\n  P extends PromiseeMap = PromiseeMap,\n  Pc = any,\n>(\n  machine: T,\n  initials: {\n    pContext: PrivateContextFrom<T>;\n    context: ContextFrom<T>;\n  },\n  ...subscribers: SubscriberType<E, P, Pc, T>[]\n) => ChildS<E, P, Pc, T>;\n\nexport type CreateChild_F<\n  E extends EventsMap = EventsMap,\n  P extends PromiseeMap = PromiseeMap,\n  Pc = any,\n> = <const T extends KeyU<'config' | 'context' | 'pContext'>>(\n  machine: T,\n  initials: {\n    pContext: PrivateContextFrom<T>;\n    context: ContextFrom<T>;\n  },\n  ...subscribers: SubscriberType<E, P, Pc, T>[]\n) => ChildS<E, P, Pc, T>;\n\n/**\n * Creates a child service for a machine.\n * @param machine of type {@linkcode KeyU}<'config' | 'context' | 'pContext'> the machine to use for creating a child service.\n * @param initials - The initials for the child service, containing `pContext` and `context`.\n * @param subscribers - The subscribers to the child service to build.\n * @returns A {@linkcode ChildS} object representing the produced child service.\n */\nexport const createChildS: CreateChildS_F = (\n  machine,\n  initials,\n  subscribers,\n) => ({\n  machine,\n  initials,\n  subscribers,\n});\n"],"names":["castings"],"mappings":";;;;AAaA;;;;;;;;;AASG;MACU,YAAY,GAAmBA,cAAQ,CAAC,OAAO,CAAC;AA6B7D;;;;;;AAMG;AACI,MAAM,YAAY,GAAmB,CAC1C,OAAO,EACP,QAAQ,EACR,WAAW,MACP;IACJ,OAAO;IACP,QAAQ;IACR,WAAW;AACZ,CAAA;;;;;"}