{"version":3,"file":"expandFnMap.js","sources":["../../../src/machine/functions/expandFnMap.ts"],"sourcesContent":["import type { ActionResultFn } from '#actions';\nimport type { EventsMap, PromiseeMap } from '#events';\nimport { type FnMap } from '#types';\nimport { reduceFnMap } from '#utils';\nimport type { Decompose } from '@bemedev/decompose';\nimport type { types } from '@bemedev/types';\nimport { assignByKey } from './subcriber';\n\nexport type ExpandFnMap = <\n  Pc,\n  Tc = types.PrimitiveObject,\n  D = Decompose<\n    {\n      pContext: Pc;\n      context: Tc;\n    },\n    { sep: '.'; object: 'both'; start: false }\n  >,\n  K extends Extract<keyof D, string> = Extract<keyof D, string>,\n  R = D[K],\n  E extends EventsMap = EventsMap,\n  P extends PromiseeMap = PromiseeMap,\n>(\n  events: E,\n  promisees: P,\n  key: K,\n  fn: FnMap<\n    E,\n    P,\n    types.Cast<Pc, types.PrimitiveObject>,\n    types.Cast<Tc, types.PrimitiveObject>,\n    R\n  >,\n) => ActionResultFn<\n  E,\n  P,\n  types.Cast<Pc, types.PrimitiveObject>,\n  types.Cast<Tc, types.PrimitiveObject>\n>;\n/**\n *\n * @param events : type {@linkcode EventsMap} [E] - The events map.\n * @param promisees  : type {@linkcode PromiseeMap} [P] - The promisees map.\n * @param key  : type {@linkcode Decompose} [D] - The key to assign the result to in the context and the private context.\n * @param fn  : type {@linkcode FnMap} [E, P, Pc, Tc, R] - The function to reduce the events and promisees and performs the action.\n * @returns a {@linkcode ActionResultFn} function.\n *\n * @see {@linkcode assignByKey} for assigning the result to the context and private context.\n * @see {@linkcode reduceFnMap} for reducing the events and promisees.\n * @see {@linkcode Decompose} for decomposing the private context and context into paths.\n *\n */\nexport const expandFnMap: ExpandFnMap = (events, promisees, key, fn) => {\n  const _fn = reduceFnMap(events, promisees, fn);\n\n  return ({ pContext, context, ...rest }) => {\n    const all = {\n      pContext,\n      context,\n    };\n    const result = _fn({ pContext, context, ...rest });\n    return assignByKey(all, key, result);\n  };\n};\n"],"names":[],"mappings":";;;;;;;;;;AAuCA;;;;;;;;;;;;AAYG;AACI,MAAM,WAAW,GAAgB,CAAC,MAAM,EAAE,SAAS,EAAE,GAAG,EAAE,EAAE,KAAI;IACrE,MAAM,GAAG,GAAG,WAAW,CAAC,MAAM,EAAE,SAAS,EAAE,EAAE,CAAC;IAE9C,OAAO,CAAC,EAAE,QAAQ,EAAE,OAAO,EAAE,GAAG,IAAI,EAAE,KAAI;AACxC,QAAA,MAAM,GAAG,GAAG;YACV,QAAQ;YACR,OAAO;SACR;AACD,QAAA,MAAM,MAAM,GAAG,GAAG,CAAC,EAAE,QAAQ,EAAE,OAAO,EAAE,GAAG,IAAI,EAAE,CAAC;QAClD,OAAO,WAAW,CAAC,GAAG,EAAE,GAAG,EAAE,MAAM,CAAC;AACtC,IAAA,CAAC;AACH;;;;"}