{"version":3,"file":"machine.js","sources":["../../src/machine/machine.ts"],"sourcesContent":["import type { Action } from '#actions';\nimport { DEFAULT_DELIMITER } from '#constants';\nimport type { Delay } from '#delays';\nimport {\n  type EventsMap,\n  type PromiseeMap,\n  type ToEvents,\n  type ToEventsR,\n} from '#events';\nimport {\n  isDefinedS,\n  isNotDefinedS,\n  isNotValue,\n  isValue,\n  type DefinedValue,\n  type PredicateS,\n} from '#guards';\nimport type {\n  State,\n  StateExtended,\n  StateP,\n  StatePextended,\n} from '#interpreters';\nimport { type PromiseFunction } from '#promises';\nimport {\n  flatMap,\n  initialConfig,\n  isAtomic,\n  isCompound,\n  nodeToValue,\n  recomposeConfig,\n  valueToNode,\n  type FlatMapN,\n  type NodeConfig,\n  type NodeConfigWithInitials,\n  type StateValue,\n} from '#states';\nimport { type RecordS } from '#types';\nimport { merge, reduceFnMap, resolve } from '#utils';\nimport { partialCall, toArray } from '@bemedev/basifun';\nimport { decompose, recompose, type Decompose } from '@bemedev/decompose';\nimport { castings, typings, type types } from '@bemedev/types';\nimport cloneDeep from 'clone-deep';\nimport {\n  createChildS,\n  expandFnMap,\n  type CreateChild_F,\n} from './functions';\nimport type {\n  AddOptions_F,\n  AnyMachine,\n  Elements,\n  GetIO_F,\n  ScheduledData,\n  SendAction_F,\n  TimeAction_F,\n  VoidAction_F,\n} from './machine.types';\nimport type {\n  Config,\n  GetEventsFromConfig,\n  GetPromiseeSrcFromConfig,\n  MachineOptions,\n  SimpleMachineOptions2,\n} from './types';\n\n/**\n * A class representing a state machine.\n * It provides methods to manage states, actions, predicates, delays, promises, and machines.\n *\n * @template : {@linkcode Config} [C] - The configuration type of the machine.\n * @template Pc : The private context type of the machine.\n * @template : {@linkcode types.PrimitiveObject} [Pc] - The context type of the machine.\n * @template : {@linkcode GetEventsFromConfig}<{@linkcode C}> [E] - The events map type derived from the configuration.\n * @template : {@linkcode PromiseeMap} [P] - The promisees map type derived from the configuration. Defaults to {@linkcode GetPromiseeSrcFromConfig}<{@linkcode C}>.\n * @template : {@linkcode SimpleMachineOptions2} [Mo] - The options type for the machine, which includes actions, predicates, delays, promises, and machines. Defaults to {@linkcode MachineOptions}<[{@linkcode C} , {@linkcode E} , {@linkcode P} , {@linkcode Pc} , {@linkcode Tc} ]>.\n *\n * @implements {@linkcode AnyMachine}<{@linkcode E} , {@linkcode P} , {@linkcode Pc} , {@linkcode Tc} >\n */\n\nclass Machine<\n  const C extends Config = Config,\n  const Pc extends types.PrimitiveObject = types.PrimitiveObject,\n  const Tc extends types.PrimitiveObject = types.PrimitiveObject,\n  E extends GetEventsFromConfig<C> = GetEventsFromConfig<C>,\n  P extends PromiseeMap = GetPromiseeSrcFromConfig<C>,\n  Mo extends SimpleMachineOptions2 = MachineOptions<C, E, P, Pc, Tc>,\n> implements AnyMachine<E, P, Pc, Tc>\n{\n  /**\n   * The configuration of the machine for this {@linkcode Machine}.\n   *\n   * @see {@linkcode Config}\n   * @see {@linkcode C}\n   */\n  #config: C;\n\n  /**\n   * The flat map of the configuration for this {@linkcode Machine}.\n   *\n   * @see {@linkcode FlatMapN}\n   * @see {@linkcode Config}\n   * @see {@linkcode C}\n   */\n  #flat: FlatMapN<C, true>;\n\n  #decomposed: Decompose<C, { sep: '.'; start: false; object: 'both' }>;\n\n  /**\n   * The map of events for this {@linkcode Machine}.\n   *\n   * @see {@linkcode EventsMap}\n   * @see {@linkcode E}\n   */\n  #eventsMap!: E;\n\n  /**\n   * The map of promisees for this {@linkcode Machine}.\n   *\n   * @see {@linkcode PromiseeMap}\n   * @see {@linkcode P}\n   */\n  #promiseesMap!: P;\n\n  /**\n   * Public accessor for the events map for this {@linkcode Machine}.\n   *\n   * @see {@linkcode EventsMap}\n   * @see {@linkcode E}   */\n  get eventsMap() {\n    return this.#eventsMap;\n  }\n\n  /**\n   * Public accessor for the promisees map for this {@linkcode Machine}.\n   *\n   * @see {@linkcode PromiseeMap}\n   * @see {@linkcode P}\n   */\n  get promiseesMap() {\n    return this.#promiseesMap;\n  }\n\n  /**\n   * @deprecated\n   *\n   * This property provides the events map for this {@linkcode Machine} as a type.\n   *\n   * @see {@linkcode ToEvents}\n   * @see {@linkcode E}\n   * @see {@linkcode P}\n   *\n   * @remarks Used for typing purposes only.\n   */\n  get __events() {\n    return typings.commons<ToEvents<E, P>>();\n  }\n\n  /**\n   * @deprecated\n   * This property provides the action function for this {@linkcode Machine} as a type.\n   *\n   * @remarks Used for typing purposes only.\n   *\n   * @see {@linkcode ToEvents}\n   * @see {@linkcode E}\n   * @see {@linkcode PromiseeMap}\n   * @see {@linkcode P}\n   * @see {@linkcode Pc}\n   * @see {@linkcode types.PrimitiveObject}\n   * @see {@linkcode Tc}\n   */\n  get __actionFn() {\n    return typings.commons<Action<E, P, Pc, Tc>>();\n  }\n\n  /**\n   * @deprecated\n   *\n   * This property provides any action key for this {@linkcode Machine} as a type.\n   *\n   * @remarks Used for typing purposes only.\n   */\n  get __actionKey() {\n    return this.#typingsByKey('actions');\n  }\n\n  /**\n   * @deprecated\n   *\n   * This property provides the action parameters of action function for this {@linkcode Machine} as a type.\n   *\n   * @remarks Used for typing purposes only.\n   *\n   * @see {@linkcode ToEvents}\n   * @see {@linkcode E}\n   * @see {@linkcode Pc}\n   * @see {@linkcode types.PrimitiveObject}\n   * @see {@linkcode Tc}\n   */\n  get __actionParams() {\n    return typings.commons<{ pContext: Pc; context: Tc; map: E }>();\n  }\n\n  /**\n   * @deprecated\n   *\n   * This property provides the state extended for this {@linkcode Machine} as a type.\n   *\n   * @remarks Used for typing purposes only.\n   *\n   * @see {@linkcode StateExtended}\n   * @see {@linkcode ToEvents}\n   * @see {@linkcode E}\n   * @see {@linkcode types.PrimitiveObject}\n   * @see {@linkcode Pc}\n   * @see {@linkcode Tc}\n   */\n  get __stateExtended() {\n    return typings.commons<StateExtended<Pc, Tc, ToEvents<E, P>>>();\n  }\n\n  /**\n   * @deprecated\n   *\n   * This property provides the state for this {@linkcode Machine} as a type.\n   *\n   * @remarks Used for typing purposes only.\n   *\n   * @see {@linkcode State}\n   * @see {@linkcode ToEvents}\n   * @see {@linkcode E}\n   * @see {@linkcode types.PrimitiveObject}\n   * @see {@linkcode Pc}\n   * @see {@linkcode Tc}\n   */\n  get __state() {\n    return typings.commons<State<Tc, ToEventsR<E, P>>>();\n  }\n\n  /**\n   * @deprecated\n   *\n   * This property provides the state payload for this {@linkcode Machine} as a type.\n   *\n   * @remarks Used for typing purposes only.\n   *\n   * @see {@linkcode StateP}\n   * @see {@linkcode ToEvents}\n   * @see {@linkcode E}\n   * @see {@linkcode types.PrimitiveObject}\n   * @see {@linkcode Pc}\n   * @see {@linkcode Tc}\n   */\n  get __stateP() {\n    return typings.commons<StateP<Tc, ToEventsR<E, P>['payload']>>();\n  }\n\n  /**\n   * @deprecated\n   *\n   * This property provides the extended state payload for this {@linkcode Machine} as a type.\n   *\n   * @remarks Used for typing purposes only.\n   *\n   * @see {@linkcode StatePextended}\n   * @see {@linkcode ToEvents}\n   * @see {@linkcode E}\n   * @see {@linkcode types.PrimitiveObject}\n   * @see {@linkcode Pc}\n   * @see {@linkcode Tc}\n   */\n  get __statePextended() {\n    return typings.commons<\n      StatePextended<Pc, Tc, ToEventsR<E, P>['payload']>\n    >();\n  }\n\n  #typingsByKey = <\n    K extends types.AllowedNames<\n      AnyMachine<E, P, Pc, Tc>,\n      object | undefined\n    >,\n  >(\n    key: K,\n  ) => {\n    const _this = typings.objects.dynamic(this);\n    const out1 = typings.objects.byKey(_this, key);\n    const out2 = typings.commons.extract(out1, typings.objects.type);\n    const out3 = typings.objects.keysOf.union(out2);\n\n    return out3;\n  };\n\n  /**\n   * @deprecated\n   *\n   * This property provides any guard key for this {@linkcode Machine} as a type.\n   *\n   * @remarks Used for typing purposes only.\n   */\n  get __guardKey() {\n    return this.#typingsByKey('predicates');\n  }\n\n  /**\n   * @deprecated\n   *\n   * This property provides the predicate function for this {@linkcode Machine} as a type.\n   *\n   * @remarks Used for typing purposes only.\n   *\n   * @see {@linkcode PredicateS}\n   * @see {@linkcode ToEvents}\n   * @see {@linkcode E}\n   * @see {@linkcode PromiseeMap}\n   * @see {@linkcode P}\n   * @see {@linkcode Pc}\n   * @see {@linkcode types.PrimitiveObject}\n   * @see {@linkcode Tc}\n   */\n  get __predictate() {\n    return typings.commons<PredicateS<E, P, Pc, Tc>>();\n  }\n\n  /**\n   * @deprecated\n   *\n   * This property provides any delay key for this {@linkcode Machine} as a type.\n   *\n   * @remarks Used for typing purposes only.\n   */\n  get __delayKey() {\n    return this.#typingsByKey('delays');\n  }\n\n  /**\n   * @deprecated\n   *\n   * This property provides the delay function for this {@linkcode Machine} as a type.\n   *\n   * @remarks Used for typing purposes only.\n   *\n   * @see {@linkcode Delay}\n   * @see {@linkcode ToEvents}\n   * @see {@linkcode E}\n   * @see {@linkcode PromiseeMap}\n   * @see {@linkcode P}\n   * @see {@linkcode Pc}\n   * @see {@linkcode types.PrimitiveObject}\n   * @see {@linkcode Tc}\n   */\n  get __delay() {\n    return typings.commons<Delay<E, P, Pc, Tc>>();\n  }\n\n  /**\n   * @deprecated\n   *\n   * This property provides any {@linkcode DefinedValue} for this {@linkcode Machine} as a type.\n   *\n   * @remarks Used for typing purposes only.\n   *\n   * @see {@linkcode DefinedValue}\n   * @see {@linkcode Pc}\n   * @see {@linkcode types.PrimitiveObject}\n   * @see {@linkcode Tc}\n   */\n  get __definedValue() {\n    return typings.commons<DefinedValue<Pc, Tc>>();\n  }\n\n  /**\n   * @deprecated\n   *\n   * This property provides any promise key for this {@linkcode Machine} as a type.\n   *\n   * @remarks Used for typing purposes only.\n   */\n  get __src() {\n    return this.#typingsByKey('promises');\n  }\n\n  /**\n   * @deprecated\n   *\n   * This property provides the promise function for this {@linkcode Machine} as a type.\n   *\n   * @remarks Used for typing purposes only.\n   *\n   * @see {@linkcode PromiseFunction}\n   * @see {@linkcode ToEvents}\n   * @see {@linkcode E}\n   * @see {@linkcode PromiseeMap}\n   * @see {@linkcode P}\n   * @see {@linkcode Pc}\n   * @see {@linkcode types.PrimitiveObject}\n   * @see {@linkcode Tc}\n   */\n  get __promise() {\n    return typings.commons<PromiseFunction<E, P, Pc, Tc>>();\n  }\n\n  /**\n   * @deprecated\n   *\n   * This property provides any machine key for this {@linkcode Machine} as a type.\n   *\n   * @remarks Used for typing purposes only.\n   */\n  get __childKey() {\n    return this.#typingsByKey('machines');\n  }\n\n  /**\n   * @deprecated\n   *\n   * Return this {@linkcode Machine} as a type.\n   *\n   * @remarks Used for typing purposes only.\n   */\n  get __machine() {\n    return typings.commons<this>();\n  }\n  // #endregion\n\n  // #region private\n  #actions?: Mo['actions'];\n\n  #predicates?: Mo['predicates'];\n\n  #delays?: Mo['delays'];\n\n  #promises?: Mo['promises'];\n\n  #machines?: Mo['machines'];\n\n  /**\n   * Initials {@linkcode StateValue}s for all compound {@linkcode NodeConfigWithInitials}.\n   */\n  #initials!: Mo['initials'];\n  #targets!: Mo['targets'];\n\n  /**\n   * Context for this {@linkcode Machine}.\n   *\n   * @see {@linkcode types.PrimitiveObject}\n   * @see {@linkcode Tc}\n   */\n  #context!: Tc;\n\n  /**\n   * Private context for this {@linkcode Machine}.\n   *\n   * @see {@linkcode Pc}\n   */\n  #pContext!: Pc;\n\n  /**\n   * Config of this {@linkcode Machine} after setting all initials {@linkcode StateValue}s.\n   *\n   * @see {@linkcode NodeConfigWithInitials}\n   */\n  #postConfig!: NodeConfigWithInitials;\n\n  /**\n   * Flat representation of the {@linkcode NodeConfigWithInitials} of this {@linkcode Machine} after setting all initials {@linkcode StateValue}s.\n   *\n   * @see {@linkcode RecordS}\n   */\n  #postflat!: RecordS<NodeConfigWithInitials>;\n\n  #initialKeys: string[] = [];\n\n  /**\n   * The initial node config of this {@linkcode Machine}.\n   */\n  #initialConfig!: NodeConfigWithInitials;\n  // #endregion\n\n  /**\n   * Creates an instance of Machine.\n   *\n   * @param config : of type {@linkcode Config} [C] - The configuration for the machine.\n   *\n   * @remarks\n   * This constructor initializes the machine with the provided configuration.\n   * It flattens the configuration and prepares it for further operations ({@linkcode preflat}).\n   */\n  constructor(config: C) {\n    this.#config = config;\n    this.#decomposed = decompose(config, {\n      start: false,\n      object: 'both',\n    }) as Decompose<C, { sep: '.'; start: false; object: 'both' }>;\n    this.#flat = flatMap<C, true>(config);\n  }\n\n  /**\n   * The accessor configuration of the machine for this {@linkcode Machine}.\n   *\n   * @see {@linkcode Config}\n   * @see {@linkcode C}\n   */\n  get preConfig() {\n    return this.#config;\n  }\n\n  /**\n   * The public accessor of the flat map of the configuration for this {@linkcode Machine}.\n   *\n   * @see {@linkcode FlatMapN}\n   * @see {@linkcode Config}\n   * @see {@linkcode C}\n   */\n  get preflat() {\n    return this.#flat;\n  }\n\n  /**\n   * The public accessor of Config of this {@linkcode Machine} after setting all initials {@linkcode StateValue}s.\n   *\n   * @see {@linkcode NodeConfigWithInitials}\n   */\n  get postConfig() {\n    return this.#postConfig!;\n  }\n\n  /**\n   * Public accessor of initial {@linkcode StateValue}s for all compound {@linkcode NodeConfigWithInitials}.\n   */\n  get initials() {\n    return this.#initials;\n  }\n\n  get targets() {\n    return this.#targets;\n  }\n\n  /**\n   * The accessor of context for this {@linkcode Machine}.\n   *\n   * @see {@linkcode types.PrimitiveObject}\n   * @see {@linkcode Tc}\n   */\n  get context() {\n    const out = this.#elements.context;\n    return out;\n  }\n\n  /**\n   * The accessor of private context for this {@linkcode Machine}.\n   *\n   * @see {@linkcode Pc}\n   */\n  get pContext() {\n    const out = this.#elements.pContext;\n    return out;\n  }\n\n  get actions() {\n    return this.#actions;\n  }\n\n  get predicates() {\n    return this.#predicates;\n  }\n\n  get delays() {\n    return this.#delays;\n  }\n\n  get promises() {\n    return this.#promises;\n  }\n\n  get machines() {\n    return this.#machines;\n  }\n\n  get postflat() {\n    return this.#postflat;\n  }\n\n  // #region Providers\n\n  #addValues = (values: Pick<Mo, 'initials' | 'targets'>) => {\n    this.#initials = values.initials;\n    this.#targets = values.targets;\n\n    if (this.#targets) {\n      const entriesT = Object.entries(this.#targets).map(\n        ([key, target]) => {\n          const key1 = key\n            .slice(1)\n            .replace(new RegExp(DEFAULT_DELIMITER, 'g'), '.states.');\n          const _key = `states.${key1}.target`;\n          return [_key, target] as const;\n        },\n      );\n\n      const decomposed: any = structuredClone(this.#decomposed);\n\n      entriesT.forEach(([key, _target]) => {\n        const from = key\n          .split(DEFAULT_DELIMITER)\n          .slice(0, -1)\n          .join(DEFAULT_DELIMITER);\n\n        const target = resolve(from, _target as string);\n\n        decomposed[key] = target;\n      });\n\n      const recomposed = recompose(decomposed);\n\n      this.#flat = (flatMap as any)(recomposed, true) as FlatMapN<C, true>;\n    }\n\n    const entries = Object.entries(this.#initials);\n    const flat: any = structuredClone(this.#flat);\n    entries.forEach(([key, initial]) => {\n      flat[key] = { ...flat[key], initial };\n    });\n\n    this.#postConfig = recomposeConfig(flat);\n    this.#initialConfig = initialConfig(this.#postConfig);\n\n    this.#getInitialKeys();\n\n    return this.#postConfig;\n  };\n\n  #getInitialKeys = () => {\n    const postConfig = this.#postConfig as NodeConfig;\n    this.#postflat = flatMap(postConfig) as any;\n\n    const entries = Object.entries(this.#postflat);\n    entries.forEach(([key, { initial }]) => {\n      const check1 = initial !== undefined;\n      if (check1) {\n        const toPush = `${key}${DEFAULT_DELIMITER}${initial}`;\n        this.#initialKeys.push(toPush);\n      }\n    });\n  };\n\n  isInitial = (target: string) => {\n    return this.#initialKeys.includes(target);\n  };\n\n  retrieveParentFromInitial = (target: string): NodeConfigWithInitials => {\n    const check1 = this.isInitial(target);\n    if (check1) {\n      const parent = target.substring(\n        0,\n        target.lastIndexOf(DEFAULT_DELIMITER),\n      );\n      const check2 = this.isInitial(parent);\n\n      if (check2) return this.retrieveParentFromInitial.bind(this)(parent);\n      return this.#postflat[parent];\n    }\n    return this.#postflat[target];\n  };\n\n  /**\n   * @deprecated\n   * @remarks used internally\n   */\n  _provideValues = (values: Pick<Mo, 'initials' | 'targets'>) => {\n    const out = this.#renew();\n    out.#addValues(values);\n    return out;\n  };\n\n  #addActions = (actions?: Mo['actions']) =>\n    (this.#actions = merge(this.#actions, actions));\n\n  #addPredicates = (predicates?: Mo['predicates']) =>\n    (this.#predicates = merge(this.#predicates, predicates));\n\n  #addDelays = (delays?: Mo['delays']) =>\n    (this.#delays = merge(this.#delays, delays));\n\n  #addPromises = (promises?: Mo['promises']) =>\n    (this.#promises = merge(this.#promises, promises));\n\n  #addMachines = (machines?: Mo['machines']) =>\n    (this.#machines = merge(this.#machines, machines));\n\n  /**\n   * Provides options for the machine.\n   *\n   * @param option a function that provides options for the machine.\n   * Options can include actions, predicates, delays, promises, and child machines.\n   * @returns a new instance of the machine with the provided options applied.\n   */\n  provideOptions = (\n    option: Parameters<(typeof this)['addOptions']>[0],\n  ) => {\n    const out = this.renew;\n    out.addOptions(option);\n\n    return out;\n  };\n  // #endregion\n\n  /**\n   * Get all meaningful elements of the machine.\n   *\n   * @see {@linkcode Elements}\n   *\n   * @see type inferences :\n   *\n   * @see {@linkcode Config} , {@linkcode C} , {@linkcode GetEventsFromConfig} , {@linkcode E} , {@linkcode PromiseeMap} , {@linkcode GetPromiseeSrcFromConfig} , {@linkcode P} , {@linkcode Pc} , {@linkcode types.PrimitiveObject} , {@linkcode Tc} , {@linkcode SimpleMachineOptions2} , {@linkcode MachineOptions} , {@linkcode Mo}\n   */\n  get #elements(): Elements<C, E, P, Pc, Tc, Mo> {\n    const config = structuredClone(this.#config);\n    const pContext = cloneDeep(this.#pContext);\n    const context = structuredClone(this.#context);\n    const actions = cloneDeep(this.#actions);\n    const predicates = cloneDeep(this.#predicates);\n    const delays = cloneDeep(this.#delays);\n    const promises = cloneDeep(this.#promises);\n    const machines = cloneDeep(this.#machines);\n    const events = cloneDeep(this.#eventsMap);\n    const promisees = cloneDeep(this.#promiseesMap);\n\n    return {\n      config,\n      pContext,\n      context,\n      actions,\n      predicates,\n      delays,\n      promises,\n      machines,\n      events,\n      promisees,\n    };\n  }\n\n  /**\n   * Provides elements of the machine.\n   * @param key the key of the element to provide.\n   * @param value the value of the element to provide.\n   * If not provided, the current elements will be returned.\n   * @returns the elements of the machine with the provided key and value.\n   *\n   * @see {@linkcode Elements}\n   *\n   * @see type inferences :\n   *\n   *  {@linkcode Config} , {@linkcode C} , {@linkcode GetEventsFromConfig} , {@linkcode E} , {@linkcode PromiseeMap} , {@linkcode GetPromiseeSrcFromConfig} , {@linkcode P} , {@linkcode Pc} , {@linkcode types.PrimitiveObject} , {@linkcode Tc} , {@linkcode SimpleMachineOptions2} , {@linkcode MachineOptions} , {@linkcode Mo}\n   */\n\n  /**\n   * Renews the machine with the provided key and value.\n   * @param key the key of the element to provide.\n   * @param value the value of the element to provide.\n   * If not provided, the current elements will be returned.\n   * @returns a new instance of this {@linkcode Machine} with the provided key and value.\n   *\n   * @see {@linkcode Elements}\n   *\n   * @see type inferences :\n   *\n   *  {@linkcode Config} , {@linkcode C} , {@linkcode GetEventsFromConfig} , {@linkcode E} , {@linkcode PromiseeMap} , {@linkcode GetPromiseeSrcFromConfig} , {@linkcode P} , {@linkcode Pc} , {@linkcode types} , {@linkcode Tc} , {@linkcode SimpleMachineOptions2} , {@linkcode MachineOptions} , {@linkcode Mo}\n   */\n  #renew = (): Machine<C, Pc, Tc, E, P, Mo> => {\n    const {\n      config,\n      pContext,\n      context,\n      predicates,\n      actions,\n      delays,\n      promises,\n      machines,\n      promisees,\n      events,\n    } = this.#elements;\n\n    const out = new Machine<C, Pc, Tc, E, P, Mo>(config);\n\n    out.#pContext = pContext;\n    out.#context = context;\n    out.#eventsMap = events;\n    out.#promiseesMap = promisees;\n\n    out.#addPredicates(predicates);\n    out.#addActions(actions);\n    out.#addDelays(delays);\n    out.#addPromises(promises);\n    out.#addMachines(machines);\n\n    return out;\n  };\n\n  /**\n   * Returns a new instance from this {@linkcode Machine} with all its {@linkcode Elements}.\n   */\n  get renew() {\n    const out = this.#renew();\n    out.#addValues({\n      initials: this.#initials,\n      targets: this.#targets,\n    });\n    return out;\n  }\n\n  /**\n   * @deprecated\n   * @remarks used internally\n   */\n  _providePrivateContext = <\n    T extends types.PrimitiveObject = types.PrimitiveObject,\n  >(\n    pContext: T,\n  ) => {\n    const { context, config, events, promisees } = this.#elements;\n\n    const out = new Machine<C, T, Tc, E, P>(config);\n\n    out.#addValues({ initials: this.#initials, targets: this.#targets });\n    out.#context = context;\n    out.#pContext = pContext;\n    out.#eventsMap = events;\n    out.#promiseesMap = promisees;\n\n    return out;\n  };\n\n  addPrivateContext = (pContext: Pc) => {\n    this.#pContext = pContext;\n  };\n\n  /**\n   * @deprecated\n   * @remarks used internally\n   */\n  _provideContext = <T extends types.PrimitiveObject>(context: T) => {\n    const { pContext, config, events, promisees } = this.#elements;\n\n    const out = new Machine<C, Pc, T, E, P>(config);\n\n    out.#addValues({ initials: this.#initials, targets: this.#targets });\n    out.#pContext = pContext;\n    out.#context = context;\n    out.#eventsMap = events;\n    out.#promiseesMap = promisees;\n\n    return out;\n  };\n\n  addContext = (context: Tc) => {\n    this.#context = context;\n  };\n  /**\n   * @deprecated\n   * @remarks used internally\n   */\n  _provideEvents = <T extends EventsMap>(map: T) => {\n    const { pContext, config, context, promisees } = this.#elements;\n\n    const out = new Machine<C, Pc, Tc, T, P>(config);\n\n    out.#addValues({ initials: this.#initials, targets: this.#targets });\n    out.#pContext = pContext;\n    out.#context = context;\n    out.#eventsMap = map;\n    out.#promiseesMap = promisees;\n\n    return out;\n  };\n\n  /**\n   * @deprecated\n   * @remarks used internally\n   */\n  _providePromisees = <T extends PromiseeMap>(map: T) => {\n    const { pContext, config, context, events } = this.#elements;\n\n    const out = new Machine<C, Pc, Tc, E, T>(config);\n\n    out.#addValues({ initials: this.#initials, targets: this.#targets });\n    out.#pContext = pContext;\n    out.#context = context;\n    out.#eventsMap = events;\n    out.#promiseesMap = map;\n\n    return out;\n  };\n\n  /**\n   * Converts a {@linkcode StateValue} to a {@linkcode NodeConfigWithInitials} with the {@linkcode NodeConfigWithInitials} postConfig of this {@linkcode Machine}.\n   *\n   * @param from the {@linkcode StateValue} to convert.\n   * @returns the converted {@linkcode NodeConfigWithInitials}.\n   *\n   * @see {@linkcode valueToNode}\n   */\n  valueToConfig = (from: StateValue) => {\n    return valueToNode(this.#postConfig, from);\n  };\n\n  /**\n   * The accessor of the initial node config of this {@linkcode Machine}.\n   */\n  get initialConfig() {\n    return this.#initialConfig;\n  }\n\n  /**\n   * The accessor of the initial {@linkcode StateValue} of this {@linkcode Machine}.\n   *\n   * @see {@linkcode nodeToValue}\n   */\n  get initialValue() {\n    return nodeToValue(this.#initialConfig);\n  }\n\n  /**\n   * Alias of {@linkcode valueToConfig} method.\n   */\n  toNode = this.valueToConfig;\n\n  get options() {\n    const predicates = this.#predicates;\n    const actions = this.#actions;\n    const delays = this.#delays;\n    const promises = this.#promises;\n    const machines = this.#machines;\n    const initials = this.#initials;\n\n    const out = castings.commons<Mo>({\n      predicates,\n      actions,\n      delays,\n      promises,\n      machines,\n      initials,\n    });\n\n    return out;\n  }\n\n  // #region Options helper functions\n\n  /**\n   * Function helper to check if a value matches the provided values\n   *\n   * @see type inferences :\n   *\n   * {@linkcode GetEventsFromConfig} , {@linkcode E} , {@linkcode PromiseeMap} , {@linkcode GetPromiseeSrcFromConfig} , {@linkcode P} , {@linkcode Pc} , {@linkcode types.PrimitiveObject} , {@linkcode Tc}\n   *\n   * @see {@linkcode isValue}\n   */\n  get #isValue() {\n    return isValue<E, P, Pc, Tc>;\n  }\n\n  /**\n   * Function helper to check if a value is not one of the provided values.\n   *\n   * @see type inferences :\n   *\n   * {@linkcode GetEventsFromConfig} , {@linkcode E} , {@linkcode PromiseeMap} , {@linkcode GetPromiseeSrcFromConfig} , {@linkcode P} , {@linkcode Pc} , {@linkcode types.PrimitiveObject} , {@linkcode Tc}\n   *\n   * @see {@linkcode isNotValue}\n   */\n  get #isNotValue() {\n    return isNotValue<E, P, Pc, Tc>;\n  }\n\n  /**\n   * Function helper to check if a value is defined\n   *\n   * @see type inferences :\n   *\n   * {@linkcode GetEventsFromConfig} , {@linkcode E} , {@linkcode PromiseeMap} , {@linkcode GetPromiseeSrcFromConfig} , {@linkcode P} , {@linkcode Pc} , {@linkcode types.PrimitiveObject} , {@linkcode Tc}\n   *\n   * @see {@linkcode isDefinedS}\n   */\n  get #isDefined() {\n    return isDefinedS<E, P, Pc, Tc>;\n  }\n\n  /**\n   * Function helper to check if a value is undefined or null\n   * @see type inferences :\n   *\n   * {@linkcode GetEventsFromConfig} , {@linkcode E} , {@linkcode PromiseeMap} , {@linkcode GetPromiseeSrcFromConfig} , {@linkcode P} , {@linkcode Pc} , {@linkcode types.PrimitiveObject} , {@linkcode Tc}\n   *\n   * @see {@linkcode isDefinedS}\n   */\n  get #isNotDefined() {\n    return isNotDefinedS<E, P, Pc, Tc>;\n  }\n\n  /**\n   * Function helper to create a child service for this {@linkcode Machine}.\n   *\n   * @see type inferences :\n   *\n   * {@linkcode GetEventsFromConfig} , {@linkcode E} , {@linkcode PromiseeMap} , {@linkcode GetPromiseeSrcFromConfig} , {@linkcode P} , {@linkcode Pc}\n   *\n   * @see {@linkcode createChildS}\n   */\n  #createChild: CreateChild_F<E, P, Pc> = (...args) => {\n    return createChildS(...args);\n  };\n  // #endregion\n\n  /**\n   * Function helper to send an event to a child service.\n   *\n   * @param _ an optional parameter of type {@linkcode AnyMachine} [{@linkcode T}] to specify the machine context. Only used for type inference.\n   *\n   * @see type inferences :\n   *\n   * {@linkcode GetEventsFromConfig} , {@linkcode E} , {@linkcode PromiseeMap} , {@linkcode GetPromiseeSrcFromConfig} , {@linkcode P} , {@linkcode Pc} , {@linkcode types.PrimitiveObject} , {@linkcode Tc}\n   *\n   * @see {@linkcode reduceFnMap}\n   */\n  #sendTo: SendAction_F<E, P, Pc, Tc> = <T extends AnyMachine>(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _?: T,\n  ) => {\n    return fn => {\n      const fn2 = reduceFnMap(this.eventsMap, this.promiseesMap, fn);\n      return ({ context, pContext, ...rest }) => {\n        const state = this.#cloneState({ context, pContext, ...rest });\n        const { event, to } = fn2(state);\n\n        const sentEvent = { to, event };\n\n        return castings.commons.any({ context, pContext, sentEvent });\n      };\n    };\n  };\n\n  /**\n   * Function helper to perform a void action.\n   *\n   * @param fn the action function to perform.\n   *\n   * @see type inferences :\n   *\n   * {@linkcode GetEventsFromConfig} , {@linkcode E} , {@linkcode PromiseeMap} , {@linkcode GetPromiseeSrcFromConfig} , {@linkcode P} , {@linkcode Pc} , {@linkcode types.PrimitiveObject} , {@linkcode Tc}\n   *\n   * @see {@linkcode VoidAction_F}\n   */\n  #voidAction: VoidAction_F<E, P, Pc, Tc> = fn => {\n    return ({ context, pContext, ...rest }) => {\n      if (fn) {\n        const state = this.#cloneState({ context, pContext, ...rest });\n        fn(state);\n      }\n      return castings.commons.any({ context, pContext });\n    };\n  };\n\n  #timeAction = (name: string): TimeAction_F<E, P, Pc, Tc> => {\n    return id =>\n      ({ context, pContext }) => {\n        return castings.commons.any({ context, pContext, [name]: id });\n      };\n  };\n\n  #cloneState = (state: StateExtended<Pc, Tc, ToEvents<E, P>>) => {\n    return structuredClone(state);\n  };\n\n  /**\n   * Provides options for the machine.\n   *\n   * @param option a function that provides options for the machine.\n   * Options can include actions, predicates, delays, promises, and child machines.\n   */\n  addOptions: AddOptions_F<\n    E,\n    P,\n    Pc,\n    Tc,\n    types.NOmit<Mo, 'initials' | 'targets'>\n  > = func => {\n    const isValue = this.#isValue;\n    const isNotValue = this.#isNotValue;\n    const isDefined = this.#isDefined;\n    const isNotDefined = this.#isNotDefined;\n    const createChild = this.#createChild;\n    const voidAction = this.#voidAction;\n    const sendTo = this.#sendTo;\n\n    const out = func({\n      isValue,\n      isNotValue,\n      isDefined,\n      isNotDefined,\n      createChild,\n      assign: (key, fn) => {\n        const out = castings.commons.any(expandFnMap)(\n          this.#eventsMap,\n          this.#promiseesMap,\n          castings.commons.any(key),\n          fn,\n        );\n\n        return out;\n      },\n      voidAction,\n      sendTo,\n      debounce: (fn, { id, ms = 100 }) => {\n        return ({ context, pContext, ...rest }) => {\n          const state = this.#cloneState({ context, pContext, ...rest });\n          const data = fn(state);\n\n          const scheduled: ScheduledData<Pc, Tc> = { data, ms, id };\n\n          return castings.commons.any({\n            context,\n            pContext,\n            scheduled,\n          });\n        };\n      },\n\n      resend: resend => {\n        return ({ context, pContext }) => {\n          return castings.commons.any({\n            context,\n            pContext,\n            resend,\n          });\n        };\n      },\n\n      forceSend: forceSend => {\n        return ({ context, pContext }) => {\n          return castings.commons.any({\n            context,\n            pContext,\n            forceSend,\n          });\n        };\n      },\n\n      pauseActivity: this.#timeAction('pauseActivity'),\n      resumeActivity: this.#timeAction('resumeActivity'),\n      stopActivity: this.#timeAction('stopActivity'),\n      pauseTimer: this.#timeAction('pauseTimer'),\n      resumeTimer: this.#timeAction('resumeTimer'),\n      stopTimer: this.#timeAction('stopTimer'),\n    });\n\n    this.#addActions(out?.actions);\n    this.#addPredicates(out?.predicates);\n    this.#addDelays(out?.delays);\n    this.#addPromises(out?.promises);\n    this.#addMachines(out?.machines);\n  };\n}\n\n/**\n * Helper to retrieve entry or exit actions from a node.\n *\n * @see {@linkcode GetIO_F}\n * @see {@linkcode toArray.typed}\n * @see {@linkcode isAtomic}\n * @see {@linkcode isCompound}\n */\nconst getIO: GetIO_F = (key, node) => {\n  if (!node) return [];\n  const out = toArray.typed(node?.[key]);\n\n  if (isAtomic(node)) return out;\n  const states = node.states;\n\n  if (isCompound(node)) {\n    const initial = states[node.initial];\n\n    out.push(...getIO(key, initial));\n  }\n\n  return out;\n};\n\n/**\n * Retrieves all entry actions from a node.\n */\nexport const getEntries = partialCall(getIO, 'entry');\n\n/**\n * Retrieves all exit actions from a node.\n */\nexport const getExits = partialCall(getIO, 'exit');\n\nexport type { Machine };\n\nexport type CreateMachine_F = <\n  const C extends Config = Config,\n  Pc extends types.PrimitiveObject = types.PrimitiveObject,\n  Tc extends types.PrimitiveObject = types.PrimitiveObject,\n  EventM extends GetEventsFromConfig<C> = GetEventsFromConfig<C>,\n  P extends PromiseeMap = GetPromiseeSrcFromConfig<C>,\n  Mo extends MachineOptions<C, EventM, P, Pc, Tc> = MachineOptions<\n    C,\n    EventM,\n    P,\n    Pc,\n    Tc\n  >,\n>(\n  config: C,\n  types: { pContext: Pc; context: Tc; eventsMap: EventM; promiseesMap: P },\n  values: Pick<Mo, 'initials' | 'targets'>,\n) => Machine<C, Pc, Tc, EventM, P>;\n\n/**\n * Creates a new instance of {@linkcode Machine} with the provided configuration and types.\n *\n * @param config The configuration for the machine.\n * @param types An object containing the types for the machine:\n * - `pContext`: The private context type.\n * - `context`: The context type.\n * - `eventsMap`: The events map type derived from the configuration.\n * - `promiseesMap`: The promisees map type derived from the configuration.\n *\n * @param initials The initials {@linkcode StateValue} for all compound node configs for the {@linkcode Machine}, derived from the configuration.\n * @returns A new instance of {@linkcode Machine} with the provided configuration and types.\n *\n * @see {@linkcode CreateMachine_F}\n */\nexport const createMachine: CreateMachine_F = (\n  config,\n  { eventsMap, pContext, context, promiseesMap },\n  values,\n) => {\n  const out = new Machine(config)\n    ._provideValues(values)\n    ._provideEvents(eventsMap)\n    ._providePrivateContext(pContext)\n    ._provideContext(context)\n    ._providePromisees(promiseesMap);\n\n  return out;\n};\n"],"names":[],"mappings":"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"}