{"version":3,"file":"types.js","sources":["../../src/machine/types.ts"],"sourcesContent":["import type { Decompose } from '@bemedev/decompose';\nimport type {\n  DeepNotUndefined,\n  Fn,\n  NotUndefined,\n  Primitive,\n  Ru,\n} from '@bemedev/types';\nimport type { Action, FromActionConfig } from '~actions';\nimport type { Delay } from '~delays';\nimport type {\n  EventsMap,\n  PromiseeDef,\n  PromiseeMap,\n  ToEvents,\n} from '~events';\nimport type { PredicateS } from '~guards';\nimport type {\n  ActivityConfig,\n  ExtractActionsFromActivity,\n  ExtractDelaysFromActivity,\n  ExtractGuardsFromActivity,\n  FlatMapN,\n  NodeConfigCompound,\n  NodeConfigCompoundWithInitials,\n  NodeConfigParallel,\n  NodeConfigParallelWithInitials,\n  NodesConfig,\n} from '~states';\nimport type {\n  ExtractActionsFromTransitions,\n  ExtractDelaysFromTransitions,\n  ExtractGuardsFromTransitions,\n  ExtractSrcFromTransitions,\n  TransitionsConfig,\n} from '~transitions';\nimport type {\n  Describer,\n  FnMap,\n  FnMap2,\n  KeyU,\n  PrimitiveObject,\n  RecordS,\n  ReduceArray,\n  SingleOrArrayL,\n  SubType,\n  TrueObject,\n} from '~types';\n\n/**\n * Type representing the main JSON config.\n *\n * @see {@linkcode NodeConfigCompound} for compound nodes.\n * @see {@linkcode NodeConfigParallel} for parallel nodes.\n */\nexport type ConfigNode = NodeConfigCompound | NodeConfigParallel;\n\n/**\n * Type representing the main node config  with initials.\n *\n * @see {@linkcode NodeConfigCompoundWithInitials} for compound nodes with initials.\n * @see {@linkcode NodeConfigParallelWithInitials} for parallel nodes with initials.\n */\nexport type ConfigNodeWithInitials =\n  | NodeConfigCompoundWithInitials\n  | NodeConfigParallelWithInitials;\n\n/**\n * Type representing a describer for a child service.\n *\n * @see {@linkcode Describer} for more details.\n */\nexport type MachineConfig = Describer | string;\n\n/**\n * Type representing the main JSON node config of a state machine.\n *\n * @see {@linkcode ConfigNode} for more details.\n * @see {@linkcode MachineConfig}\n * @see {@linkcode SingleOrArrayL}\n */\nexport type Config = ConfigNode & {\n  readonly machines?: SingleOrArrayL<MachineConfig>;\n  readonly strict?: boolean;\n};\n\n/**\n * Retreieves all initlal states from a flat map of nodes.\n *\n * @template : {@linkcode FlatMapN} [Flat] - type of the flat map of nodes\n * @returns A type representing the initials of the flat map.\n *\n * @see {@linkcode FlatMapN} for more details on the flat map structure.\n * @see {@linkcode NodesConfig} for the structure of nodes configuration.\n * @see {@linkcode SubType} for extracting subtypes from a type.\n */\nexport type GetInititalsFromFlat<Flat extends FlatMapN = FlatMapN> =\n  SubType<\n    Flat,\n    { type?: 'compound'; states: NodesConfig }\n  > extends infer Sub\n    ? {\n        [key in keyof Sub]: keyof ('states' extends keyof Sub[key]\n          ? Sub[key]['states']\n          : never);\n      }\n    : never;\n\n/**\n * Type representing the initials of a state machine config.\n * @template : {@linkcode Config} [C] - type of the machine config\n * @returns A type representing the initials of the machine config.\n */\nexport type InitialsFromConfig<C extends Config> = GetInititalsFromFlat<\n  FlatMapN<C>\n>;\n\n/**\n * Type representing all action keys from a flat map of nodes.\n * @template : {@linkcode FlatMapN} [Flat] - type of the flat map of nodes\n * @returns A type representing all action keys from this flat map.\n *\n * @see {@linkcode TransitionsConfig} for the structure of transitions.\n * @see {@linkcode ActivityConfig} for the structure of activities.\n * @see {@linkcode FromActionConfig} for extracting action names from action configurations.\n * @see {@linkcode ExtractActionsFromTransitions} for extracting actions from transitions.\n * @see {@linkcode ExtractActionsFromActivity} for extracting actions from activities.\n * @see {@linkcode ReduceArray} for reducing arrays to a single type.\n */\ntype _GetKeyActionsFromFlat<Flat extends FlatMapN> = {\n  [key in keyof Flat]:\n    | ExtractActionsFromTransitions<Extract<Flat[key], TransitionsConfig>>\n    | ExtractActionsFromActivity<\n        Extract<Flat[key], { activities: ActivityConfig }>\n      >\n    | FromActionConfig<\n        ReduceArray<Extract<Flat[key], { entry: any }>['entry']>\n      >\n    | FromActionConfig<\n        ReduceArray<Extract<Flat[key], { exit: any }>['exit']>\n      > extends infer V\n    ? unknown extends V\n      ? never\n      : V\n    : never;\n}[keyof Flat];\n\n/**\n * Type representing all guard keys from a flat map of nodes.\n * @template : {@linkcode FlatMapN} [Flat] - type of the flat map of nodes\n * @returns A type representing all guard keys from this flat map.\n *\n * @see {@linkcode TransitionsConfig} for the structure of transitions.\n * @see {@linkcode ActivityConfig} for the structure of activities.\n * @see {@linkcode ExtractGuardsFromTransitions} for extracting guards from transitions.\n * @see {@linkcode ExtractGuardsFromActivity} for extracting guards from activities.\n */\ntype _GetKeyGuardsFromFlat<Flat extends FlatMapN> = {\n  [key in keyof Flat]:\n    | ExtractGuardsFromTransitions<Extract<Flat[key], TransitionsConfig>>\n    | ExtractGuardsFromActivity<\n        Extract<Flat[key], { activities: ActivityConfig }>\n      > extends infer V\n    ? unknown extends V\n      ? never\n      : V\n    : never;\n}[keyof Flat];\n\n/**\n * Type representing all promise keys from a flat map of nodes.\n * @template : {@linkcode FlatMapN} [Flat] - type of the flat map of nodes\n * @returns A type representing all promise keys from this flat map.\n *\n * @see {@linkcode TransitionsConfig} for the structure of transitions.\n * @see {@linkcode ExtractSrcFromTransitions} for extracting promise keys from transitions.\n */\ntype _GetKeySrcFromFlat<Flat extends FlatMapN> = {\n  [key in keyof Flat]: ExtractSrcFromTransitions<\n    Extract<Flat[key], TransitionsConfig>\n  > extends infer V\n    ? unknown extends V\n      ? never\n      : V\n    : never;\n}[keyof Flat];\n\n/**\n * Type representing all event types from a flat map of nodes.\n * @template : {@linkcode FlatMapN} [Flat] - type of the flat map of nodes\n * @returns A type representing all event types from this flat map.\n *\n */\ntype _GetEventKeysFromFlat<Flat extends FlatMapN> = {\n  [key in keyof Flat]: Flat[key] extends { on: infer V } ? keyof V : never;\n}[keyof Flat];\n\n/**\n * Type representing all delay keys from a flat map of nodes.\n * @template : {@linkcode FlatMapN} [Flat] - type of the flat map of nodes\n * @returns A type representing all delay keys from this flat map.\n *\n * @see {@linkcode TransitionsConfig} for the structure of transitions.\n * @see {@linkcode ActivityConfig} for the structure of activities.\n * @see {@linkcode ExtractDelaysFromTransitions} for extracting delays from transitions.\n * @see {@linkcode ExtractDelaysFromActivity} for extracting delays from activities.\n */\ntype _GetDelayKeysFromFlat<Flat extends FlatMapN> = {\n  [key in keyof Flat]:\n    | ExtractDelaysFromTransitions<Extract<Flat[key], TransitionsConfig>>\n    | ExtractDelaysFromActivity<Flat[key]> extends infer V\n    ? unknown extends V\n      ? never\n      : V\n    : never;\n}[keyof Flat];\n\n/**\n * Provide a record of all actions by key and {@linkcode Action} function.\n *\n * @template : {@linkcode FlatMapN} [Flat] - type of the flat map of nodes\n * @template : {@linkcode EventsMap} [E] - type of the events map\n * @template : {@linkcode PromiseeMap} [P] - type of the promisees map\n * @template Pc - type of the private context\n * @template : {@linkcode PrimitiveObject} [Tc] - type of the context\n *\n * @see {@linkcode _GetKeyActionsFromFlat} for extracting action keys from the flat map.\n */\nexport type GetActionsFromFlat<\n  Flat extends FlatMapN,\n  E extends EventsMap,\n  P extends PromiseeMap = PromiseeMap,\n  Pc = any,\n  Tc extends PrimitiveObject = PrimitiveObject,\n> = Record<_GetKeyActionsFromFlat<Flat>, Action<E, P, Pc, Tc>>;\n\n/**\n * Provide a record of all guards by key and {@linkcode PredicateS} function.\n *\n * @template : {@linkcode FlatMapN} [Flat] - type of the flat map of nodes\n * @template : {@linkcode EventsMap} [E] - type of the events map\n * @template : {@linkcode PromiseeMap} [P] - type of the promisees map\n * @template Pc - type of the private context\n * @template : {@linkcode PrimitiveObject} [Tc] - type of the context\n *\n * @see {@linkcode _GetKeyGuardsFromFlat} for extracting guard keys from the flat map.\n */\nexport type GetGuardsFromFlat<\n  Flat extends FlatMapN,\n  E extends EventsMap,\n  P extends PromiseeMap = PromiseeMap,\n  Pc = any,\n  Tc extends PrimitiveObject = PrimitiveObject,\n> = Record<_GetKeyGuardsFromFlat<Flat>, PredicateS<E, P, Pc, Tc>>;\n\n/**\n * Provide a record of all promisee src(s) by key and {@linkcode PromiseFunction} function.\n *\n * @template : {@linkcode FlatMapN} [Flat] - type of the flat map of nodes\n * @template : {@linkcode EventsMap} [E] - type of the events map\n * @template : {@linkcode PromiseeMap} [P] - type of the promisees map\n * @template Pc - type of the private context\n * @template : {@linkcode PrimitiveObject} [Tc] - type of the context\n *\n * @see {@linkcode _GetKeySrcFromFlat} for extracting promise src keys from the flat map.\n */\nexport type GetSrcFromFlat<\n  Flat extends FlatMapN,\n  E extends EventsMap = EventsMap,\n  P extends PromiseeMap = PromiseeMap,\n  Pc = any,\n  Tc extends PrimitiveObject = PrimitiveObject,\n> = Record<_GetKeySrcFromFlat<Flat>, PromiseFunction<E, P, Pc, Tc>>;\n\n/**\n * Provide a record of all delays by key and {@linkcode Delay} function.\n *\n * @template : {@linkcode FlatMapN} [Flat] - type of the flat map of nodes\n * @template : {@linkcode EventsMap} [E] - type of the events map\n * @template : {@linkcode PromiseeMap} [P] - type of the promisees map\n * @template Pc - type of the private context\n * @template : {@linkcode PrimitiveObject} [Tc] - type of the context\n *\n * @see {@linkcode _GetDelayKeysFromFlat} for extracting delay keys from the flat map.\n */\nexport type GetDelaysFromFlat<\n  Flat extends FlatMapN,\n  E extends EventsMap = EventsMap,\n  P extends PromiseeMap = PromiseeMap,\n  Pc = any,\n  Tc extends PrimitiveObject = PrimitiveObject,\n> = Record<_GetDelayKeysFromFlat<Flat>, Delay<E, P, Pc, Tc>>;\n\n/**\n * Provide a record of all events by key and {@linkcode PrimitiveObject} payload.\n *\n * @template : {@linkcode FlatMapN} [Flat] - type of the flat map of nodes\n *\n * @see {@linkcode _GetEventKeysFromFlat} for extracting event keys from the flat map.\n */\nexport type GetEventsFromFlat<Flat extends FlatMapN> = Record<\n  _GetEventKeysFromFlat<Flat>,\n  PrimitiveObject\n>;\n\n/**\n * Get all events from a machine config.\n *\n * @template : {@linkcode Config} [C] - type of the machine config\n * @returns A type representing all events from the machine config.\n *\n * @see {@linkcode FlatMapN} for the flat map structure.\n * @see {@linkcode GetEventsFromFlat} for extracting events from the flat map.\n * @see {@linkcode ConfigFrom} for extracting the config from the config.\n */\nexport type GetEventsFromConfig<C extends Config> = GetEventsFromFlat<\n  FlatMapN<C>\n>;\n\n/**\n * Get all events from a machine.\n *\n * @template : {@linkcode KeyU}<'preConfig'> [T] - type of the machine\n *\n * @returns A type representing all events from the machine.\n *\n * @see {@linkcode ConfigFrom} for extracting the config from the machine.\n * @see {@linkcode GetEventsFromConfig} for extracting events from the machine.\n */\nexport type GetEventsFromMachine<T extends KeyU<'preConfig'>> =\n  GetEventsFromConfig<ConfigFrom<T>>;\n\n/**\n * Provide a record of all promises by key and {@linkcode PromiseeDef} type.\n *\n * @template : {@linkcode FlatMapN} [Flat] - type of the flat map of nodes\n *\n * @see {@linkcode _GetKeySrcFromFlat} for extracting promise keys from the flat map.\n */\nexport type GetPromiseeSrcFromFlat<Flat extends FlatMapN> = Record<\n  _GetKeySrcFromFlat<Flat>,\n  PromiseeDef\n>;\n\n/**\n * Get all promises from a machine config.\n *\n * @template : {@linkcode Config} [C] - type of the machine config\n * @returns A type representing all promises from the machine config.\n *\n * @see {@linkcode FlatMapN} for the flat map structure.\n * @see {@linkcode GetPromiseeSrcFromFlat} for extracting promises from the flat map.\n * @see {@linkcode FlatMapN} for extracting the config from a machine key.\n */\nexport type GetPromiseeSrcFromConfig<C extends Config> =\n  GetPromiseeSrcFromFlat<FlatMapN<C>>;\n\nexport type GetPromiseeSrcFromMachine<T extends KeyU<'preConfig'>> =\n  GetPromiseeSrcFromConfig<ConfigFrom<T>>;\n\nexport type GetMachineKeysFromConfig<C extends Config> = FromActionConfig<\n  ReduceArray<NotUndefined<C['machines']>>\n>;\n\nexport type Decompose2<T> = T extends Ru\n  ? Decompose<DeepNotUndefined<T>>\n  : never;\n\ntype HeritageMap<U extends Ru, Tc extends Ru> =\n  Decompose<U> extends infer KU extends object\n    ? {\n        [key in keyof KU]?: Decompose<Tc> extends infer KT extends object\n          ? SingleOrArrayL<keyof SubType<KT, KU[key]>>\n          : never;\n      }\n    : never;\n\ntype SubNev = { contexts?: never };\n\ntype SubEventsKeysFrom<T extends KeyU<'preConfig' | 'context'>> =\n  | keyof GetEventsFromMachine<T>\n  | (GetPromiseeSrcFromMachine<T> extends infer K extends string\n      ? `${K}::${'then' | 'catch'}`\n      : never);\n\ntype SubEventsKeys<E extends EventsMap, P extends PromiseeMap> =\n  | keyof E\n  | (keyof P extends infer K extends string\n      ? `${K}::${'then' | 'catch'}`\n      : never);\n\nexport const EVENTS_FULL = 'machine$$full';\n\nexport type SubscriberType<\n  E extends EventsMap = EventsMap,\n  P extends PromiseeMap = PromiseeMap,\n  Pc = any,\n  U extends KeyU<'preConfig' | 'context'> = KeyU<'preConfig' | 'context'>,\n> = {\n  events:\n    | SingleOrArrayL<\n        | {\n            [key in SubEventsKeysFrom<U>]?: SingleOrArrayL<\n              SubEventsKeys<E, P>\n            >;\n          }\n        | SubEventsKeys<E, P>\n      >\n    | typeof EVENTS_FULL;\n} & (ContextFrom<U> extends infer CU\n  ? CU extends TrueObject\n    ? Pc extends TrueObject\n      ? { contexts: SingleOrArrayL<HeritageMap<CU, Pc>> }\n      : SubNev\n    : CU extends Primitive\n      ? Pc extends CU\n        ? SubNev\n        : Pc extends infer Tc1 extends TrueObject\n          ? { contexts: SingleOrArrayL<keyof SubType<Decompose<Tc1>, CU>> }\n          : SubNev\n      : SubNev\n  : SubNev);\n\nexport type ChildS<\n  E extends EventsMap = EventsMap,\n  P extends PromiseeMap = PromiseeMap,\n  Pc = any,\n  T extends KeyU<'preConfig' | 'context' | 'pContext'> = KeyU<\n    'preConfig' | 'context' | 'pContext'\n  >,\n> = {\n  machine: T;\n  initials: {\n    pContext: PrivateContextFrom<T>;\n    context: ContextFrom<T>;\n  };\n  subscribers: SingleOrArrayL<SubscriberType<E, P, Pc, NoInfer<T>>>;\n};\n\nexport type ChildS2<\n  E extends EventsMap = EventsMap,\n  P extends PromiseeMap = PromiseeMap,\n  Pc = any,\n  Tc extends PrimitiveObject = PrimitiveObject,\n  T extends KeyU<'preConfig' | 'context' | 'pContext'> = KeyU<\n    'preConfig' | 'context' | 'pContext'\n  >,\n> = {\n  machine: T;\n  initials: FnMap<\n    E,\n    P,\n    Pc,\n    Tc,\n    {\n      pContext: PrivateContextFrom<T>;\n      context: ContextFrom<T>;\n    }\n  >;\n  subscribers: SingleOrArrayL<SubscriberType<E, P, Pc, NoInfer<T>>>;\n};\n\nexport type FnMapFrom<\n  T extends KeyU<'eventsMap' | 'pContext' | 'context' | 'promiseesMap'>,\n  R = any,\n> = FnMap2<\n  Extract<EventsMapFrom<T>, EventsMap>,\n  Extract<PromiseesMapFrom<T>, PromiseeDef>,\n  Extract<ContextFrom<T>, PrimitiveObject>,\n  R\n>;\n\nexport type GetMachinesFromConfig<\n  C extends Config,\n  E extends EventsMap = EventsMap,\n  P extends PromiseeMap = PromiseeMap,\n  Pc = any,\n> = Record<GetMachineKeysFromConfig<C>, ChildS<E, P, Pc>>;\n\nexport type MachineOptions<\n  C extends Config = Config,\n  E extends EventsMap = EventsMap,\n  P extends PromiseeMap = PromiseeMap,\n  Pc = any,\n  Tc extends PrimitiveObject = PrimitiveObject,\n  Flat extends FlatMapN<C> = FlatMapN<C>,\n> = {\n  initials: GetInititalsFromFlat<Flat>;\n  actions?: Partial<GetActionsFromFlat<Flat, E, P, Pc, Tc>>;\n  predicates?: Partial<GetGuardsFromFlat<Flat, E, P, Pc, Tc>>;\n  promises?: Partial<GetSrcFromFlat<Flat, E, P, Pc, Tc>>;\n  delays?: Partial<GetDelaysFromFlat<Flat, E, P, Pc, Tc>>;\n  machines?: Partial<GetMachinesFromConfig<C, E, P, Pc>>;\n};\n\nexport type MachineOptionsFrom<T extends KeyU<'options'>> = Extract<\n  T['options'],\n  SimpleMachineOptions2\n>;\n\nexport type MoF<T extends KeyU<'options'>> = MachineOptionsFrom<T>;\n\nexport type ConfigFrom<T extends KeyU<'preConfig'>> = Extract<\n  T['preConfig'],\n  Config\n>;\n\nexport type PrivateContextFrom<T extends KeyU<'pContext'>> = T['pContext'];\n\nexport type ContextFrom<T extends KeyU<'context'>> = Extract<\n  T['context'],\n  PrimitiveObject\n>;\n\nexport type EventsMapFrom<T extends KeyU<'eventsMap'>> = Extract<\n  T['eventsMap'],\n  EventsMap\n>;\n\nexport type PromiseesMapFrom<T extends KeyU<'promiseesMap'>> = Extract<\n  T['promiseesMap'],\n  PromiseeMap\n>;\n\nexport type EventsFrom<T extends KeyU<'__events'>> = T['__events'];\n\nexport type ActionsFrom<T extends KeyU<'actions'>> = NotUndefined<\n  T['actions']\n>;\n\nexport type ActionFnFrom<T extends KeyU<'__actionFn'>> =\n  NotUndefined<T['__actionFn']> extends infer A extends any[] ? A : never;\n\nexport type ActionParamsFrom<T extends KeyU<'actionParams'>> =\n  NotUndefined<T['actionParams']>;\n\nexport type ActionKeysFrom<T extends KeyU<'actions'>> =\n  keyof ActionsFrom<T>;\n\nexport type GuardsFrom<T extends KeyU<'predicates'>> = NotUndefined<\n  T['predicates']\n>;\n\nexport type GuardKeysFrom<T extends KeyU<'predicates'>> =\n  keyof GuardsFrom<T>;\n\nexport type DelaysFrom<T extends KeyU<'delays'>> = NotUndefined<\n  T['delays']\n>;\n\nexport type DelayKeysFrom<T extends KeyU<'delays'>> = keyof DelaysFrom<T>;\n\nexport type PromisesFrom<T extends KeyU<'promises'>> = NotUndefined<\n  T['promises']\n>;\n\nexport type PromiseKeysFrom<T extends KeyU<'promises'>> =\n  keyof PromisesFrom<T>;\n\nexport type MachinesFrom<T extends KeyU<'machines'>> = NotUndefined<\n  T['machines']\n>;\n\nexport type MachineKeysFrom<T extends KeyU<'machines'>> =\n  keyof MachinesFrom<T> extends infer M\n    ? unknown extends M\n      ? never\n      : M\n    : never;\n\nexport type SimpleMachineOptions<\n  E extends EventsMap = EventsMap,\n  P extends PromiseeMap = PromiseeMap,\n  Pc = any,\n  Tc extends PrimitiveObject = PrimitiveObject,\n> = {\n  initials: RecordS<string>;\n  actions?: Partial<RecordS<Action<E, P, Pc, Tc>>>;\n  predicates?: Partial<RecordS<PredicateS<E, P, Pc, Tc>>>;\n  promises?: Partial<RecordS<PromiseFunction<E, P, Pc, Tc>>>;\n  delays?: Partial<RecordS<Delay<E, P, Pc, Tc>>>;\n  machines?: Partial<RecordS<any>>;\n};\n\nexport type SimpleMachineOptions2 = Partial<\n  Record<\n    | 'initials'\n    | 'actions'\n    | 'predicates'\n    | 'promises'\n    | 'delays'\n    | 'machines',\n    any\n  >\n>;\n\nexport type PromiseFunction<\n  E extends EventsMap = EventsMap,\n  P extends PromiseeMap = PromiseeMap,\n  Pc = any,\n  TC extends PrimitiveObject = PrimitiveObject,\n> = FnMap<E, P, Pc, TC, Promise<any>>;\n\nexport type PromiseFunction2<\n  E extends EventsMap = EventsMap,\n  P extends PromiseeMap = PromiseeMap,\n  Pc = any,\n  TC extends PrimitiveObject = PrimitiveObject,\n> = Fn<[Pc, TC, ToEvents<E, P>], Promise<any>>;\n\nexport type MachineMap<\n  E extends EventsMap = EventsMap,\n  P extends PromiseeMap = PromiseeMap,\n  Pc = any,\n> = Partial<RecordS<ChildS<E, P, Pc>>>;\n"],"names":[],"mappings":"AAuYO,MAAM,WAAW,GAAG;;;;"}