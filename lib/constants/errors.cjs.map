{"version":3,"file":"errors.cjs","sources":["../../src/constants/errors.ts"],"sourcesContent":["import type { types } from '@bemedev/types';\nimport type { STR } from './types';\n\nconst action = {\n  normal: 'action',\n  capital: 'Action',\n} as const satisfies STR;\n\nconst guard = {\n  normal: 'guard',\n  capital: 'Guard',\n} as const satisfies STR;\n\nconst delay = {\n  normal: 'delay',\n  capital: 'Delay',\n} as const satisfies STR;\n\nconst promise = {\n  normal: 'promise',\n  capital: 'Promise',\n} as const satisfies STR;\n\nconst machine = {\n  normal: 'machine',\n  capital: 'Machine',\n} as const satisfies STR;\n\nconst notDefined = 'is undefined' as const;\nconst notDescribed = 'is not described' as const;\nconst notProvided = 'is not provided' as const;\n\nconst notDefinedF = <T extends string>(type: T) => {\n  const string = `${type} ${notDefined}` as const;\n  return { string, error: new Error(string) };\n};\n\nconst notDescribedF = <T extends string>(type: T) => {\n  const string = `${type} ${notDescribed}` as const;\n  return { string, error: new Error(string) };\n};\n\nconst notProvidedF = <T extends string>(type: T) => {\n  const string = `${type} ${notProvided}` as const;\n  return { string, error: new Error(string) };\n};\n\nconst produceErrors = <const T extends STR[]>(...types: T) => {\n  const out = {};\n\n  types.forEach(value => {\n    Object.assign(out, {\n      [value.normal]: {\n        notDefined: notDefinedF(value['capital']),\n        notDescribed: notDescribedF(value['capital']),\n        notProvided: notProvidedF(value['capital']),\n      },\n    });\n  });\n\n  type Out = T[number] extends infer N extends STR\n    ? N extends any\n      ? {\n          [key in N['normal']]: {\n            notDefined: ReturnType<typeof notDefinedF<N['capital']>>;\n            notDescribed: ReturnType<typeof notDescribedF<N['capital']>>;\n            notProvided: ReturnType<typeof notProvidedF<N['capital']>>;\n          };\n        }\n      : never\n    : never;\n\n  return out as types.UnionToIntersection<Out>;\n};\n\n/**\n * Contains error messages for various machine components.\n * Each component (action, guard, delay, promise, machine) has three types of errors:\n * - `notDefined`: Indicates that the component is not defined.\n * - `notDescribed`: Indicates that the component is not described.\n * - `notProvided`: Indicates that the component is not provided.\n */\nexport const ERRORS = produceErrors(\n  action,\n  guard,\n  delay,\n  promise,\n  machine,\n);\n"],"names":[],"mappings":";;AAGA,MAAM,MAAM,GAAG;AACb,IAAA,MAAM,EAAE,QAAQ;AAChB,IAAA,OAAO,EAAE,QAAQ;CACK;AAExB,MAAM,KAAK,GAAG;AACZ,IAAA,MAAM,EAAE,OAAO;AACf,IAAA,OAAO,EAAE,OAAO;CACM;AAExB,MAAM,KAAK,GAAG;AACZ,IAAA,MAAM,EAAE,OAAO;AACf,IAAA,OAAO,EAAE,OAAO;CACM;AAExB,MAAM,OAAO,GAAG;AACd,IAAA,MAAM,EAAE,SAAS;AACjB,IAAA,OAAO,EAAE,SAAS;CACI;AAExB,MAAM,OAAO,GAAG;AACd,IAAA,MAAM,EAAE,SAAS;AACjB,IAAA,OAAO,EAAE,SAAS;CACI;AAExB,MAAM,UAAU,GAAG,cAAuB;AAC1C,MAAM,YAAY,GAAG,kBAA2B;AAChD,MAAM,WAAW,GAAG,iBAA0B;AAE9C,MAAM,WAAW,GAAG,CAAmB,IAAO,KAAI;AAChD,IAAA,MAAM,MAAM,GAAG,CAAA,EAAG,IAAI,CAAA,CAAA,EAAI,UAAU,EAAW;IAC/C,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,IAAI,KAAK,CAAC,MAAM,CAAC,EAAE;AAC7C,CAAC;AAED,MAAM,aAAa,GAAG,CAAmB,IAAO,KAAI;AAClD,IAAA,MAAM,MAAM,GAAG,CAAA,EAAG,IAAI,CAAA,CAAA,EAAI,YAAY,EAAW;IACjD,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,IAAI,KAAK,CAAC,MAAM,CAAC,EAAE;AAC7C,CAAC;AAED,MAAM,YAAY,GAAG,CAAmB,IAAO,KAAI;AACjD,IAAA,MAAM,MAAM,GAAG,CAAA,EAAG,IAAI,CAAA,CAAA,EAAI,WAAW,EAAW;IAChD,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,IAAI,KAAK,CAAC,MAAM,CAAC,EAAE;AAC7C,CAAC;AAED,MAAM,aAAa,GAAG,CAAwB,GAAG,KAAQ,KAAI;IAC3D,MAAM,GAAG,GAAG,EAAE;AAEd,IAAA,KAAK,CAAC,OAAO,CAAC,KAAK,IAAG;AACpB,QAAA,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE;AACjB,YAAA,CAAC,KAAK,CAAC,MAAM,GAAG;AACd,gBAAA,UAAU,EAAE,WAAW,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;AACzC,gBAAA,YAAY,EAAE,aAAa,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;AAC7C,gBAAA,WAAW,EAAE,YAAY,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;AAC5C,aAAA;AACF,SAAA,CAAC;AACJ,IAAA,CAAC,CAAC;AAcF,IAAA,OAAO,GAAqC;AAC9C,CAAC;AAED;;;;;;AAMG;AACI,MAAM,MAAM,GAAG,aAAa,CACjC,MAAM,EACN,KAAK,EACL,KAAK,EACL,OAAO,EACP,OAAO;;;;"}