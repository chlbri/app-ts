{"version":3,"file":"toTransition.js","sources":["../../../src/transitions/functions/toTransition.ts"],"sourcesContent":["import { toAction } from '#actions';\nimport type { EventsMap, PromiseeMap } from '#events';\nimport { toPredicate, type GuardConfig } from '#guards';\nimport type { SimpleMachineOptions2 } from '#machines';\nimport type { Transition, TransitionConfig } from '#transitions';\nimport { toArray } from '@bemedev/basifun';\nimport type { types } from '@bemedev/types';\n\nexport type ToTransition_F = <\n  E extends EventsMap = EventsMap,\n  P extends PromiseeMap = PromiseeMap,\n  Pc = any,\n  Tc extends types.PrimitiveObject = types.PrimitiveObject,\n>(\n  events: E,\n  promisees: P,\n  config: TransitionConfig & { target?: string },\n  options?: Pick<SimpleMachineOptions2, 'actions' | 'predicates'>,\n) => Transition<E, P, Pc, Tc>;\n\n/**\n * Converts a transition configuration to a structured transition object with all functions.\n *\n * @param events - The events map used for action and guard resolution.\n * @param promisees - The promisees map used for promise resolution.\n * @param config - The transition configuration to convert.\n * @param options - Optional machine options that may include actions and predicates configurations.\n * @returns A structured transition object with target, actions, guards, and optional description.\n *\n * @see {@linkcode ToTransition_F} for more details\n * @see {@linkcode toAction} for converting actions\n * @see {@linkcode toPredicate} for converting guards\n * @see {@linkcode toArray.typed} for ensuring typed arrays\n * @see {@linkcode toArray} for ensuring typed arrays\n */\nexport const toTransition: ToTransition_F = (\n  events,\n  promisees,\n  config,\n  options,\n) => {\n  const { description, target } = config;\n\n  const actions = toArray\n    .typed(config.actions)\n    .map(action => toAction(events, promisees, action, options?.actions));\n  const guards = toArray<GuardConfig>(config.guards).map(guard =>\n    toPredicate(events, promisees, guard, options?.predicates),\n  );\n\n  const out = { target, actions, guards } as any;\n\n  if (description) out.description = description;\n  return out;\n};\n"],"names":[],"mappings":";;;;;;;;;;;;;;AAoBA;;;;;;;;;;;;;;AAcG;AACI,MAAM,YAAY,GAAmB,CAC1C,MAAM,EACN,SAAS,EACT,MAAM,EACN,OAAO,KACL;AACF,IAAA,MAAM,EAAE,WAAW,EAAE,MAAM,EAAE,GAAG,MAAM;IAEtC,MAAM,OAAO,GAAG;AACb,SAAA,KAAK,CAAC,MAAM,CAAC,OAAO;AACpB,SAAA,GAAG,CAAC,MAAM,IAAI,QAAQ,CAAC,MAAM,EAAE,SAAS,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;AACvE,IAAA,MAAM,MAAM,GAAG,OAAO,CAAc,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,KAAK,IAC1D,WAAW,CAAC,MAAM,EAAE,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE,UAAU,CAAC,CAC3D;IAED,MAAM,GAAG,GAAG,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAS;AAE9C,IAAA,IAAI,WAAW;AAAE,QAAA,GAAG,CAAC,WAAW,GAAG,WAAW;AAC9C,IAAA,OAAO,GAAG;AACZ;;;;"}