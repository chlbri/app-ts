{"version":3,"file":"isStringEvent.cjs","sources":["../../../src/events/functions/isStringEvent.ts"],"sourcesContent":["import {\n  AFTER_EVENT,\n  ALWAYS_EVENT,\n  INIT_EVENT,\n  MAX_EXCEEDED_EVENT_TYPE,\n} from '../constants';\nimport type { EventStrings } from '../types';\n\nconst VALUES = [INIT_EVENT, MAX_EXCEEDED_EVENT_TYPE];\n\n/**\n * Checks if the provided event is a {@linkcode EventStrings}.\n * @param event of type any, the event to check\n * @returns true if the event is a {@linkcode EventStrings}\n * @satisfies typechecker\n *\n * @see {@linkcode INIT_EVENT} for the initial event.\n * @see {@linkcode ALWAYS_EVENT} for the always event.\n * @see {@linkcode AFTER_EVENT} for the after event.\n * @see {@linkcode MAX_EXCEEDED_EVENT_TYPE} for the max exceeded event.\n */\nexport const isStringEvent = (event: any): event is EventStrings => {\n  const out =\n    typeof event === 'string' &&\n    (VALUES.includes(event) ||\n      event.endsWith(ALWAYS_EVENT) ||\n      event.endsWith(AFTER_EVENT));\n\n  return out;\n};\n"],"names":["INIT_EVENT","MAX_EXCEEDED_EVENT_TYPE","ALWAYS_EVENT","AFTER_EVENT"],"mappings":";;;;AAQA,MAAM,MAAM,GAAG,CAACA,2BAAU,EAAEC,wCAAuB,CAAC;AAEpD;;;;;;;;;;AAUG;AACI,MAAM,aAAa,GAAG,CAAC,KAAU,KAA2B;AACjE,IAAA,MAAM,GAAG,GACP,OAAO,KAAK,KAAK,QAAQ;AACzB,SAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC;AACrB,YAAA,KAAK,CAAC,QAAQ,CAACC,6BAAY,CAAC;AAC5B,YAAA,KAAK,CAAC,QAAQ,CAACC,4BAAW,CAAC,CAAC;AAEhC,IAAA,OAAO,GAAG;AACZ;;;;"}