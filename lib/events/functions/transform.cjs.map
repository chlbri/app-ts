{"version":3,"file":"transform.cjs","sources":["../../../src/events/functions/transform.ts"],"sourcesContent":["import type { EventArg, EventsMap } from '../types';\nimport { type _EventsR } from './../types';\n\nexport type TransformEventArg = <E extends EventsMap>(\n  event: EventArg<E>,\n) => _EventsR<E>;\n\n/**\n * Transforms an non-formated event into a standardized event object.\n * @param event of type {@linkcode EventArg}, the event to transform.\n * It can be a string or an object.\n *\n * @returns a {@linkcode _EventsR} object, transformed event object with type and payload properties.\n * If the event is a string, it returns an object with type set to the string and\n * an empty payload. If the event is an object, it returns the event as is.\n *\n * @see {@linkcode EventsMap}\n */\nexport const transformEventArg: TransformEventArg = event => {\n  const check1 = typeof event === 'string';\n  if (check1) return { type: event, payload: {} } as any;\n\n  return event;\n};\n"],"names":[],"mappings":";;AAOA;;;;;;;;;;AAUG;AACI,MAAM,iBAAiB,GAAsB,KAAK,IAAG;AAC1D,IAAA,MAAM,MAAM,GAAG,OAAO,KAAK,KAAK,QAAQ;AACxC,IAAA,IAAI,MAAM;QAAE,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,EAAE,EAAS;AAEtD,IAAA,OAAO,KAAK;AACd;;;;"}