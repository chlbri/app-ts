{"version":3,"file":"value.js","sources":["../../../../src/guards/functions/helpers/value.ts"],"sourcesContent":["import type { EventsMap, PromiseeMap } from '#events';\nimport { getByKey } from '#machines';\nimport type { FnR } from '#types';\nimport type { types } from '@bemedev/types';\nimport type { DefinedValue } from '../../types';\n\nexport type IsValueS_F = <\n  E extends EventsMap,\n  P extends PromiseeMap = PromiseeMap,\n  Pc extends types.PrimitiveObject = types.PrimitiveObject,\n  Tc extends types.PrimitiveObject = types.PrimitiveObject,\n>(\n  path: DefinedValue<Pc, Tc>,\n  ...values: any[]\n) => FnR<E, P, Pc, Tc, boolean>;\n\n/**\n * Checks if the value at the specified path in pContext, context, or events matches any of the provided values.\n * @param path of type {@linkcode DefinedValue}, the path to retrieve.\n * @enum\n * The path can be one of the following:\n * - 'pContext': checks if the value in pContext is one of the provided values\n * - 'context': checks if the value in context is one of the provided values\n * - 'events': checks if the value in events is one of the provided values\n * - 'context.[key]': checks if the value in context at the specified key is one of the provided values\n * - 'pContext.[key]': checks if the value in pContext at the specified key is one of the provided values\n * - 'events.[key]': checks if the value in events at the specified key is one of the provided values\n * @param values the values to check against.\n * @returns a {@linkcode FnR} function that takes pContext, context, and eventsMap and returns true if the value at the specified path matches any of the provided values, false otherwise.\n *\n * @example\n * ```ts\n * const guard = isValue('context.userId', '123', '456');\n * const result = guard({ context: { userId: '123' } }, {}, {});\n * console.log(result); // true\n * ```\n *\n * @see {@linkcode EventsMap} for the type of the events map.\n * @see {@linkcode PromiseeMap} for the type of the promisees map.\n * @see {@linkcode types.PrimitiveObject} for the type of the context.\n * @see {@linkcode getByKey} for retrieving values by key.\n *  @see {@linkcode t} for type checking and validation.\n *\n * @see {@linkcode isNotValue} for the opposite check.\n */\nexport const isValue: IsValueS_F = (path, ...values) => {\n  const start = path.startsWith.bind(path);\n\n  return ({ pContext, context, event }) => {\n    if (path === 'pContext') {\n      return values.some(value => pContext === value);\n    }\n\n    if (path === 'context') {\n      return values.some(value => context === value);\n    }\n\n    if (path === 'events') return values.some(value => event === value);\n\n    if (start('context.')) {\n      const key = path.replace('context.', '');\n      return values.some(value => getByKey(context, key) === value);\n    }\n\n    if (start('pContext.')) {\n      const key = path.replace('pContext.', '');\n      return values.some(value => getByKey(pContext, key) === value);\n    }\n\n    const key = path.replace('events.', '');\n    const toValidate = getByKey(event, key);\n    return values.some(value => toValidate === value);\n  };\n};\n\n/**\n * Checks if the value at the specified path in pContext, context, or events doesn't matches any of the provided values.\n * @param path of type {@linkcode DefinedValue}, the path to retrieve.\n * @enum\n * The path can be one of the following:\n * - 'pContext': checks if the value in pContext is one of the provided values\n * - 'context': checks if the value in context is one of the provided values\n * - 'events': checks if the value in events is one of the provided values\n * - 'context.[key]': checks if the value in context at the specified key is one of the provided values\n * - 'pContext.[key]': checks if the value in pContext at the specified key is one of the provided values\n * - 'events.[key]': checks if the value in events at the specified key is one of the provided values\n * @param values the values to check against.\n * @returns a {@linkcode FnR} function that takes pContext, context, and eventsMap and returns true if the value at the specified path matches doesn't any of the provided values, false otherwise.\n *\n * @example\n * ```ts\n * const guard = isNotValue('context.userId', '123', '456');\n * const result = guard({ context: { userId: '123' } }, {}, {});\n * console.log(result); // false\n * ```\n *\n * @see {@linkcode EventsMap} for the type of the events map.\n * @see {@linkcode PromiseeMap} for the type of the promisees map.\n * @see {@linkcode types.PrimitiveObject} for the type of the context.\n * @see {@linkcode getByKey} for retrieving values by key.\n * @see {@linkcode t} for type checking and validation.\n *\n * @see {@linkcode isValue} for the opposite check.\n */\nexport const isNotValue: IsValueS_F = (path, ...values) => {\n  const func = isValue(path, ...values);\n\n  return state => {\n    const result = func(state);\n    return !result;\n  };\n};\n"],"names":[],"mappings":";;;;;;;;;;;;AAgBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BG;AACI,MAAM,OAAO,GAAe,CAAC,IAAI,EAAE,GAAG,MAAM,KAAI;IACrD,MAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC;IAExC,OAAO,CAAC,EAAE,QAAQ,EAAE,OAAO,EAAE,KAAK,EAAE,KAAI;AACtC,QAAA,IAAI,IAAI,KAAK,UAAU,EAAE;AACvB,YAAA,OAAO,MAAM,CAAC,IAAI,CAAC,KAAK,IAAI,QAAQ,KAAK,KAAK,CAAC;QACjD;AAEA,QAAA,IAAI,IAAI,KAAK,SAAS,EAAE;AACtB,YAAA,OAAO,MAAM,CAAC,IAAI,CAAC,KAAK,IAAI,OAAO,KAAK,KAAK,CAAC;QAChD;QAEA,IAAI,IAAI,KAAK,QAAQ;AAAE,YAAA,OAAO,MAAM,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,KAAK,KAAK,CAAC;AAEnE,QAAA,IAAI,KAAK,CAAC,UAAU,CAAC,EAAE;YACrB,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;AACxC,YAAA,OAAO,MAAM,CAAC,IAAI,CAAC,KAAK,IAAI,QAAQ,CAAC,OAAO,EAAE,GAAG,CAAC,KAAK,KAAK,CAAC;QAC/D;AAEA,QAAA,IAAI,KAAK,CAAC,WAAW,CAAC,EAAE;YACtB,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC;AACzC,YAAA,OAAO,MAAM,CAAC,IAAI,CAAC,KAAK,IAAI,QAAQ,CAAC,QAAQ,EAAE,GAAG,CAAC,KAAK,KAAK,CAAC;QAChE;QAEA,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC;QACvC,MAAM,UAAU,GAAG,QAAQ,CAAC,KAAK,EAAE,GAAG,CAAC;AACvC,QAAA,OAAO,MAAM,CAAC,IAAI,CAAC,KAAK,IAAI,UAAU,KAAK,KAAK,CAAC;AACnD,IAAA,CAAC;AACH;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BG;AACI,MAAM,UAAU,GAAe,CAAC,IAAI,EAAE,GAAG,MAAM,KAAI;IACxD,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,EAAE,GAAG,MAAM,CAAC;IAErC,OAAO,KAAK,IAAG;AACb,QAAA,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC;QAC1B,OAAO,CAAC,MAAM;AAChB,IAAA,CAAC;AACH;;;;"}