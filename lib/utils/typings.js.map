{"version":3,"file":"typings.js","sources":["../../src/utils/typings.ts"],"sourcesContent":["import { type types } from '@bemedev/types';\n\ntype PrimitiveS = 'string' | 'number' | 'boolean' | 'null' | 'undefined';\n\ntype TransformPrimitiveS<T extends PrimitiveS> = T extends 'string'\n  ? string\n  : T extends 'number'\n    ? number\n    : T extends 'boolean'\n      ? boolean\n      : T extends 'null'\n        ? null\n        : T extends 'undefined'\n          ? undefined\n          : T;\n\ntype Types = PrimitiveS | 'primitive';\n\ntype TransformTypes<T extends Types> = T extends PrimitiveS\n  ? TransformPrimitiveS<T>\n  : // eslint-disable-next-line @typescript-eslint/no-empty-object-type\n    {};\n\nconst transformTypes = <T extends Types>(type: T): TransformTypes<T> => {\n  const out: any = type === 'primitive' ? {} : undefined;\n  return out;\n};\n\nexport const CUSTOM = '$$app-ts => custom$$' as const;\nexport const PARTIAL = '$$app-ts => partial$$' as const;\n\nexport type Custom<T = any> = {\n  [CUSTOM]: T;\n};\n\nexport type PartialCustom = {\n  [PARTIAL]: undefined;\n};\n\ntype PrimitiveObjectMap = {\n  [key: types.Keys]: types.SoRa<_PrimitiveObject>;\n};\ntype _PrimitiveObject =\n  | Types\n  | PrimitiveObjectMap\n  | Custom\n  | PartialCustom;\n\n/**\n * A type that represents a primitive object, which can be a primitive value or an object\n *\n * @remark\n */\ntype PrimitiveObject = _PrimitiveObject;\n\nexport type Args<\n  E extends PrimitiveObject = PrimitiveObject,\n  P extends PrimitiveObject = PrimitiveObject,\n> = {\n  eventsMap: E;\n  pContext: PrimitiveObject;\n  context: PrimitiveObject;\n  promiseesMap: P;\n};\n\nexport type TransformPrimitiveObject<T> = T extends Types\n  ? TransformTypes<T>\n  : T extends Custom<infer TCustom>\n    ? TCustom\n    : T extends PartialCustom\n      ? Partial<TransformPrimitiveObject<types.NOmit<T, typeof PARTIAL>>>\n      : T extends types.AnyArray<any>\n        ? T[number] extends infer TKN extends types.PrimitiveObject\n          ? TransformPrimitiveObject<TKN>[]\n          : never\n        : {\n            [K in keyof T]: TransformPrimitiveObject<T[K]>;\n          };\n\nconst transformPrimitiveObject = (obj: any): any => {\n  const _obj = obj as any;\n\n  const checkArray = Array.isArray(_obj);\n  if (checkArray) {\n    return _obj.map(transformPrimitiveObject) as any;\n  }\n\n  const checkObject = typeof _obj === 'object';\n  if (checkObject) {\n    const isCustom = Object.keys(_obj).every(key => key === CUSTOM);\n    const out: any = {};\n    if (isCustom) return out;\n\n    const entries = Object.entries(_obj).filter(\n      ([key]) => key !== PARTIAL,\n    );\n\n    entries.forEach(([key, value]) => {\n      out[key] = transformPrimitiveObject(value as any);\n    });\n\n    return out;\n  }\n\n  return transformTypes(_obj);\n};\n\nexport type TransformArgs<T extends Partial<Args>> = {\n  eventsMap: TransformPrimitiveObject<T['eventsMap']>;\n  pContext: TransformPrimitiveObject<T['pContext']>;\n  context: TransformPrimitiveObject<T['context']>;\n  promiseesMap: TransformPrimitiveObject<T['promiseesMap']>;\n};\n\nconst DEFAULT_ARGS = {\n  eventsMap: 'primitive',\n  pContext: 'primitive',\n  context: 'primitive',\n  promiseesMap: 'primitive',\n} satisfies Args;\n\nconst defaultArgs = <T extends Partial<Args>>(values: T) => {\n  const args = { ...DEFAULT_ARGS, ...values } as Args;\n  return args;\n};\n\nexport const typings = <T extends Partial<Args>>(\n  args: T,\n): TransformArgs<T> => {\n  const out = transformPrimitiveObject(defaultArgs(args));\n  return out;\n};\n\ntypings.custom = <T = any>(value?: T) =>\n  ({ [CUSTOM]: value }) as Custom<T>;\ntypings.partial = <T extends PrimitiveObject>(\n  value: T,\n): T & PartialCustom => {\n  const entries = Object.entries(value).filter(([key]) => key !== PARTIAL);\n  const out: any = {};\n\n  entries.forEach(([key, value]) => {\n    out[key] = value;\n  });\n\n  return out;\n};\n"],"names":[],"mappings":"AAuBA,MAAM,cAAc,GAAG,CAAkB,IAAO,KAAuB;AACrE,IAAA,MAAM,GAAG,GAAQ,IAAI,KAAK,WAAW,GAAG,EAAE,GAAG,SAAS;AACtD,IAAA,OAAO,GAAG;AACZ,CAAC;AAEM,MAAM,MAAM,GAAG;AACf,MAAM,OAAO,GAAG;AAkDvB,MAAM,wBAAwB,GAAG,CAAC,GAAQ,KAAS;IACjD,MAAM,IAAI,GAAG,GAAU;IAEvB,MAAM,UAAU,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC;IACtC,IAAI,UAAU,EAAE;AACd,QAAA,OAAO,IAAI,CAAC,GAAG,CAAC,wBAAwB,CAAQ;IAClD;AAEA,IAAA,MAAM,WAAW,GAAG,OAAO,IAAI,KAAK,QAAQ;IAC5C,IAAI,WAAW,EAAE;AACf,QAAA,MAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,GAAG,IAAI,GAAG,KAAK,MAAM,CAAC;QAC/D,MAAM,GAAG,GAAQ,EAAE;AACnB,QAAA,IAAI,QAAQ;AAAE,YAAA,OAAO,GAAG;QAExB,MAAM,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,MAAM,CACzC,CAAC,CAAC,GAAG,CAAC,KAAK,GAAG,KAAK,OAAO,CAC3B;QAED,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,KAAI;YAC/B,GAAG,CAAC,GAAG,CAAC,GAAG,wBAAwB,CAAC,KAAY,CAAC;AACnD,QAAA,CAAC,CAAC;AAEF,QAAA,OAAO,GAAG;IACZ;AAEA,IAAA,OAAO,cAAc,CAAC,IAAI,CAAC;AAC7B,CAAC;AASD,MAAM,YAAY,GAAG;AACnB,IAAA,SAAS,EAAE,WAAW;AACtB,IAAA,QAAQ,EAAE,WAAW;AACrB,IAAA,OAAO,EAAE,WAAW;AACpB,IAAA,YAAY,EAAE,WAAW;CACX;AAEhB,MAAM,WAAW,GAAG,CAA0B,MAAS,KAAI;IACzD,MAAM,IAAI,GAAG,EAAE,GAAG,YAAY,EAAE,GAAG,MAAM,EAAU;AACnD,IAAA,OAAO,IAAI;AACb,CAAC;AAEM,MAAM,OAAO,GAAG,CACrB,IAAO,KACa;IACpB,MAAM,GAAG,GAAG,wBAAwB,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;AACvD,IAAA,OAAO,GAAG;AACZ;AAEA,OAAO,CAAC,MAAM,GAAG,CAAU,KAAS,MACjC,EAAE,CAAC,MAAM,GAAG,KAAK,EAAE,CAAc;AACpC,OAAO,CAAC,OAAO,GAAG,CAChB,KAAQ,KACa;IACrB,MAAM,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,GAAG,KAAK,OAAO,CAAC;IACxE,MAAM,GAAG,GAAQ,EAAE;IAEnB,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,KAAI;AAC/B,QAAA,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK;AAClB,IAAA,CAAC,CAAC;AAEF,IAAA,OAAO,GAAG;AACZ,CAAC;;;;"}